<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sonzonzy</title>
  
  <subtitle>sonzonzy&#39;s blog</subtitle>
  <link href="https://sonzonzy.github.io/atom.xml" rel="self"/>
  
  <link href="https://sonzonzy.github.io/"/>
  <updated>2022-07-01T21:54:04.000Z</updated>
  <id>https://sonzonzy.github.io/</id>
  
  <author>
    <name>sonzonzy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《理论+实战 构建完整JVM知识体系》study notes</title>
    <link href="https://sonzonzy.github.io/%E3%80%8A%E7%90%86%E8%AE%BA-%E5%AE%9E%E6%88%98-%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4JVM%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E3%80%8Bstudy-notes/"/>
    <id>https://sonzonzy.github.io/%E3%80%8A%E7%90%86%E8%AE%BA-%E5%AE%9E%E6%88%98-%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4JVM%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E3%80%8Bstudy-notes/</id>
    <published>2022-07-01T21:54:04.000Z</published>
    <updated>2022-07-01T21:54:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识JVM规范"><a href="#认识JVM规范" class="headerlink" title="认识JVM规范"></a>认识JVM规范</h1><h2 id="JVM概述"><a href="#JVM概述" class="headerlink" title="JVM概述"></a>JVM概述</h2><ul><li><p>JVM：Java Virtual Machine</p></li><li><p>所谓虚拟机是指：通过软件模拟的，具有完整硬件系统功能的、运行在一个完全隔离环境中的计算机</p></li><li><p>JVM是通过软件来模拟Java字节码的指令集，是Java程序的运行环境</p></li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3luw1u10fja0.webp"                      width="90%"                 ><br/><h3 id="JVM主要功能"><a href="#JVM主要功能" class="headerlink" title="JVM主要功能"></a>JVM主要功能</h3><ul><li>通过ClassLoader寻找和加载class文件</li><li>解释字节码成机器指令并执行，提供class文件运行环境</li><li>进行运行期间的内存分配和垃圾回收</li><li>提供与硬件交互的平台</li></ul><br/><h3 id="虚拟机是java平台无关的保障"><a href="#虚拟机是java平台无关的保障" class="headerlink" title="虚拟机是java平台无关的保障"></a>虚拟机是java平台无关的保障</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.rlwtwx7dsuo.webp"                      width="70%"                 ><br/><h2 id="JVM规范"><a href="#JVM规范" class="headerlink" title="JVM规范"></a>JVM规范</h2><h3 id="JVM规范的作用"><a href="#JVM规范的作用" class="headerlink" title="JVM规范的作用"></a>JVM规范的作用</h3><ul><li>Java虚拟机规范为不通的硬件平台提供了一种编译Java技术代码的规范</li><li>该规范使Java软件独立于平台，因为编译是针对作为虚拟机的 ”一般机器“ 而做</li><li>这个 ”一般机器“ ，可用软件模拟，并运行于各种现存的计算机系统，也可用硬件来实现</li></ul><br/><h3 id="JVM规范主要内容"><a href="#JVM规范主要内容" class="headerlink" title="JVM规范主要内容"></a>JVM规范主要内容</h3><ul><li>cpu(字节码指令集）</li><li>class文件格式</li><li>数据类型和值</li><li>运行时数据区</li><li>栈帧</li><li>特殊方法</li><li>类库</li><li>异常</li><li>虚拟机的启动、加载、连接和初始化</li></ul><br/><h2 id="Class字节码"><a href="#Class字节码" class="headerlink" title="Class字节码"></a>Class字节码</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;认识JVM规范&quot;&gt;&lt;a href=&quot;#认识JVM规范&quot; class=&quot;headerlink&quot; title=&quot;认识JVM规范&quot;&gt;&lt;/a&gt;认识JVM规范&lt;/h1&gt;&lt;h2 id=&quot;JVM概述&quot;&gt;&lt;a href=&quot;#JVM概述&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="java" scheme="https://sonzonzy.github.io/categories/java/"/>
    
    <category term="jvm" scheme="https://sonzonzy.github.io/categories/java/jvm/"/>
    
    
    <category term="jvm" scheme="https://sonzonzy.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://sonzonzy.github.io/Redis/"/>
    <id>https://sonzonzy.github.io/Redis/</id>
    <published>2022-07-01T17:47:47.000Z</published>
    <updated>2022-07-01T17:47:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识Redis"><a href="#初识Redis" class="headerlink" title="初识Redis"></a>初识Redis</h1><h2 id="SQL与NoSQL"><a href="#SQL与NoSQL" class="headerlink" title="SQL与NoSQL"></a>SQL与NoSQL</h2><br/><table><thead><tr><th align="center"></th><th align="center">SQL（关系型数据库）</th><th align="center">NoSQL（非关系数据库）</th></tr></thead><tbody><tr><td align="center">数据结构</td><td align="center">结构化</td><td align="center">非结构化</td></tr><tr><td align="center">数据关联</td><td align="center">关联的</td><td align="center">无关联的</td></tr><tr><td align="center">查询方式</td><td align="center">SQL查询</td><td align="center">非SQL</td></tr><tr><td align="center">事务特性</td><td align="center">ACID</td><td align="center">BASE</td></tr><tr><td align="center">存储方式</td><td align="center">磁盘</td><td align="center">内存</td></tr><tr><td align="center">扩展性</td><td align="center">垂直</td><td align="center">水平</td></tr><tr><td align="center">使用场景</td><td align="center">（1）数据结构固定<br/>（2）相关业务对数据安全性、一致性有较高要求</td><td align="center">（1）数据结构不固定<br/>（2）对一致性、安全性要求不高<br/>（3）对性能要求</td></tr></tbody></table><br/><ul><li>数据结构</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/d30b03101d4e1a06a2ed1e5be56700b.31vpj58sbty0.webp"                      width="80%"                ><br/><ul><li>数据关联</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/e3f1c89793ff81d6babb11413fe2ebe.1smbrmpvghq8.webp"                      width="80%"                ><br/><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/1d6675040ee9bbcce9c49e3cc39747c.2fpd2jgc3xxc.webp"                      width="80%"                ><br/><ul><li>SQL查询</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/5cd0215e592bef1b35b0203d36b7a48.3x5xuvughi00.webp"                      width="80%"                 ><br/><h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><ul><li>Redis诞生于2009年全称是Remote Dictionary Server，远程词典服务器，是一个基于内存的键值型NoSQL数据库。</li></ul><br/><h2 id="Redis特征"><a href="#Redis特征" class="headerlink" title="Redis特征"></a>Redis特征</h2><ul><li>键值（key-value）型，value支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟，速度快（基于内存、IO多路复用、良好的编码）</li><li>支持数据持久化</li><li>支持主从集群、分片集群</li><li>支持多语言客户端</li></ul><br/><h2 id="单机安装Redis"><a href="#单机安装Redis" class="headerlink" title="单机安装Redis"></a>单机安装Redis</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖 （Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖）</span></span><br><span class="line"></span><br><span class="line">yum install -y gcc tcl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传/下载 安装包并解压</span></span><br><span class="line"></span><br><span class="line">[root@localhost install]<span class="comment"># cd /install/</span></span><br><span class="line">[root@localhost install]<span class="comment"># wget https://download.redis.io/releases/redis-6.2.7.tar.gz</span></span><br><span class="line"></span><br><span class="line">[root@localhost install]<span class="comment"># ll</span></span><br><span class="line">总用量 2448</span><br><span class="line">drwxr-xr-x.  9 1001  1001     186 6月  12 05:34 nginx-1.16.1</span><br><span class="line">drwxr-xr-x.  9 1169  1169    8192 6月  12 05:42 pcre-8.43</span><br><span class="line">-rw-r--r--.  1 root root  2487287 4月  27 21:39 redis-6.2.7.tar.gz</span><br><span class="line">drwxr-xr-x.  2 root root       83 6月  12 05:13 tar-gz</span><br><span class="line">drwxr-xr-x. 14  501 games    4096 6月  12 05:42 zlib-1.2.11</span><br><span class="line">[root@localhost install]<span class="comment"># tar -zxvf redis-6.2.7.tar.gz</span></span><br><span class="line"></span><br><span class="line">[root@localhost install]<span class="comment"># ll</span></span><br><span class="line">总用量 2452</span><br><span class="line">drwxr-xr-x.  9 1001  1001     186 6月  12 05:34 nginx-1.16.1</span><br><span class="line">drwxr-xr-x.  9 1169  1169    8192 6月  12 05:42 pcre-8.43</span><br><span class="line">drwxrwxr-x.  7 root root     4096 4月  27 21:31 redis-6.2.7</span><br><span class="line">-rw-r--r--.  1 root root  2487287 4月  27 21:39 redis-6.2.7.tar.gz</span><br><span class="line">drwxr-xr-x.  2 root root       83 6月  12 05:13 tar-gz</span><br><span class="line">drwxr-xr-x. 14  501 games    4096 6月  12 05:42 zlib-1.2.11</span><br><span class="line">[root@localhost install]<span class="comment"># mv redis-6.2.7 /usr/local/</span></span><br><span class="line">[root@localhost install]<span class="comment"># cd /usr/local/</span></span><br><span class="line"></span><br><span class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># ln -s redis-6.2.7/ redis</span></span><br><span class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># ll</span></span><br><span class="line">总用量 4</span><br><span class="line">drwxr-xr-x.  2 root root    6 4月  11 2018 bin</span><br><span class="line">drwxr-xr-x.  2 root root    6 4月  11 2018 etc</span><br><span class="line">drwxr-xr-x.  2 root root    6 4月  11 2018 games</span><br><span class="line">drwxr-xr-x.  2 root root    6 4月  11 2018 include</span><br><span class="line">drwxr-xr-x.  2 root root    6 4月  11 2018 lib</span><br><span class="line">drwxr-xr-x.  2 root root    6 4月  11 2018 lib64</span><br><span class="line">drwxr-xr-x.  2 root root    6 4月  11 2018 libexec</span><br><span class="line">drwxr-xr-x. 12 root root  162 6月  12 05:48 nginx</span><br><span class="line">lrwxrwxrwx.  1 root root   12 7月   2 04:16 redis -&gt; redis-6.2.7/</span><br><span class="line">drwxrwxr-x.  7 root root 4096 7月   2 04:16 redis-6.2.7</span><br><span class="line">drwxr-xr-x.  2 root root    6 4月  11 2018 sbin</span><br><span class="line">drwxr-xr-x.  5 root root   49 5月  16 02:44 share</span><br><span class="line">drwxr-xr-x.  2 root root    6 4月  11 2018 src</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入redis目录，运行编译命令。如果没有出错，应该就安装成功了</span></span><br><span class="line"></span><br><span class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># cd redis</span></span><br><span class="line">[root@localhost redis]<span class="comment"># make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认的安装路径是在 `/usr/local/bin`目录下：</span></span><br><span class="line"></span><br><span class="line">[root@localhost redis]<span class="comment"># cd /usr/local/bin/</span></span><br><span class="line">[root@localhost bin]<span class="comment"># ll</span></span><br><span class="line">总用量 18924</span><br><span class="line">-rwxr-xr-x. 1 root root 4830048 7月   2 04:21 redis-benchmark</span><br><span class="line">lrwxrwxrwx. 1 root root      12 7月   2 04:21 redis-check-aof -&gt; redis-server</span><br><span class="line">lrwxrwxrwx. 1 root root      12 7月   2 04:21 redis-check-rdb -&gt; redis-server</span><br><span class="line">-rwxr-xr-x. 1 root root 5004160 7月   2 04:21 redis-cli</span><br><span class="line">lrwxrwxrwx. 1 root root      12 7月   2 04:21 redis-sentinel -&gt; redis-server</span><br><span class="line">-rwxr-xr-x. 1 root root 9535904 7月   2 04:21 redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该目录以及默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</span></span><br><span class="line"></span><br><span class="line">redis-cli</span><br><span class="line"><span class="comment"># 是redis提供的命令行客户端</span></span><br><span class="line"></span><br><span class="line">redis-server</span><br><span class="line"><span class="comment"># 是redis的服务端启动脚本</span></span><br><span class="line"></span><br><span class="line">redis-sentinel</span><br><span class="line"><span class="comment"># 是redis的哨兵启动脚本</span></span><br></pre></td></tr></table></figure><br/><h2 id="Redis启动"><a href="#Redis启动" class="headerlink" title="Redis启动"></a>Redis启动</h2><h3 id="默认启动（前台启动）"><a href="#默认启动（前台启动）" class="headerlink" title="默认启动（前台启动）"></a>默认启动（前台启动）</h3><ul><li>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><br/><h3 id="指定配置启动"><a href="#指定配置启动" class="headerlink" title="指定配置启动"></a>指定配置启动</h3><ul><li>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们先将这个配置文件备份一份：</span></span><br><span class="line"><span class="built_in">cp</span> redis.conf redis.conf.bck</span><br></pre></td></tr></table></figure><ul><li>然后修改redis.conf文件中的一些配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span><br><span class="line">bind 0.0.0.0</span><br><span class="line"></span><br><span class="line"># 守护进程，修改为yes后即可后台运行</span><br><span class="line">daemonize yes </span><br><span class="line"></span><br><span class="line"># 密码，设置后访问Redis必须输入密码</span><br><span class="line">requirepass redis</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>指定配置启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入redis安装目录 </span></span><br><span class="line">[root@localhost redis]<span class="comment"># cd /usr/local/redis</span></span><br><span class="line">[root@localhost redis]<span class="comment"># redis-server redis.conf</span></span><br><span class="line">[root@localhost redis]<span class="comment">#</span></span><br><span class="line">[root@localhost redis]<span class="comment"># ps -ef |grep redis</span></span><br><span class="line">root       6421   1956  0 04:24 pts/0    00:00:01 redis-server *:6379</span><br><span class="line">root       6494   6432  0 04:35 pts/1    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><br/><h3 id="开机自启（把redis添加到系统服务）"><a href="#开机自启（把redis添加到系统服务）" class="headerlink" title="开机自启（把redis添加到系统服务）"></a>开机自启（把redis添加到系统服务）</h3><ul><li>我们也可以通过配置来实现开机自启，首先，新建一个系统服务文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure><ul><li>内容如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /usr/local/redis/redis.conf</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>然后重载系统服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li>现在，我们可以用下面这组命令来操作redis了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start redis</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop redis</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart redis</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status redis</span><br></pre></td></tr></table></figure><ul><li>执行下面的命令，可以让redis开机自启</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> redis</span><br></pre></td></tr></table></figure><br/><h2 id="Redis的其它常见配置"><a href="#Redis的其它常见配置" class="headerlink" title="Redis的其它常见配置"></a>Redis的其它常见配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听的端口</span></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span><br><span class="line"><span class="built_in">dir</span> .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><br><span class="line">databases 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置redis能够使用的最大内存</span></span><br><span class="line">maxmemory 512mb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class="line">logfile <span class="string">&quot;redis.log&quot;</span></span><br></pre></td></tr></table></figure><br/><h2 id="Redis停止"><a href="#Redis停止" class="headerlink" title="Redis停止"></a>Redis停止</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span></span><br><span class="line"><span class="comment"># 因为之前配置了密码，因此需要通过 -u 来指定密码</span></span><br><span class="line">redis-cli -u redis shutdown</span><br></pre></td></tr></table></figure><br/><h1 id="Redis客户端"><a href="#Redis客户端" class="headerlink" title="Redis客户端"></a>Redis客户端</h1><h2 id="Redis命令行客户端"><a href="#Redis命令行客户端" class="headerlink" title="Redis命令行客户端"></a>Redis命令行客户端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli [options] [commonds]</span><br></pre></td></tr></table></figure><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 123321</code>：指定redis的访问密码</li></ul><p>其中的commonds就是Redis的操作命令，例如：</p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li></ul><p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image-20211211110439353.2aqqz6hz4m4g.webp"                      width="80%"                 ><br/><h2 id="图形化桌面客户端"><a href="#图形化桌面客户端" class="headerlink" title="图形化桌面客户端"></a>图形化桌面客户端</h2><ul><li><a class="link"   href="https://github.com/lework/RedisDesktopManager-Windows/releases" >https://github.com/lework/RedisDesktopManager-Windows/releases<i class="fas fa-external-link-alt"></i></a></li></ul><br/><h2 id="Redis的Java客户端"><a href="#Redis的Java客户端" class="headerlink" title="Redis的Java客户端"></a>Redis的Java客户端</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6lpitp9r4g00.webp"                      width="80%"                 ><br/><h3 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h3><h4 id="Jedis使用的基本步骤"><a href="#Jedis使用的基本步骤" class="headerlink" title="Jedis使用的基本步骤"></a>Jedis使用的基本步骤</h4><p>（1）引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）创建Jedis对象，建立连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@BeforeEach</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">testJedis</span><span class="params">()</span> &#123;</span><br><span class="line">       jedis = <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.163.200&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">       jedis.auth(<span class="string">&quot;redis&quot;</span>);</span><br><span class="line">       jedis.select(<span class="number">0</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>（3）使用Jedis，方法名与Redis命令一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 插入数据，方法名称就是redis命令名称，非常简单</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）释放资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Deprecated</span><br><span class="line">   void <span class="function"><span class="title">tearDown</span></span>() &#123;</span><br><span class="line">       <span class="keyword">if</span> (jedis != null) &#123;</span><br><span class="line">           jedis.close();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br/><h4 id="Jedis连接池"><a href="#Jedis连接池" class="headerlink" title="Jedis连接池"></a>Jedis连接池</h4><ul><li>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此推荐大家使用Jedis连接池代替Jedis的直连方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisConnectionFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        <span class="comment">// 最大连接</span></span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">// 最大空闲连接</span></span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">8</span>); </span><br><span class="line">        <span class="comment">// 最小空闲连接</span></span><br><span class="line">        jedisPoolConfig.setMinIdle(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 设置最长等待时间， ms</span></span><br><span class="line">        jedisPoolConfig.setMaxWaitMillis(<span class="number">200</span>);</span><br><span class="line">        jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(jedisPoolConfig, <span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>,</span><br><span class="line">                <span class="number">1000</span>, <span class="string">&quot;123321&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取Jedis对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h3 id="SpringDataRedis"><a href="#SpringDataRedis" class="headerlink" title="SpringDataRedis"></a>SpringDataRedis</h3><h4 id="SpringDataRedis简介"><a href="#SpringDataRedis简介" class="headerlink" title="SpringDataRedis简介"></a>SpringDataRedis简介</h4><ul><li><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：<a class="link"   href="https://spring.io/projects/spring-data-redis" >https://spring.io/projects/spring-data-redis<i class="fas fa-external-link-alt"></i></a></p><ul><li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li><li>提供了RedisTemplate统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul></li><li><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p></li></ul><table><thead><tr><th align="center">API</th><th align="center">返回值类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong>redisTemplate</strong>.opsForValue()</td><td align="center">ValueOperations</td><td align="center">操作String类型数据</td></tr><tr><td align="center"><strong>redisTemplate</strong>.opsForHash()</td><td align="center">HashOperations</td><td align="center">操作Hash类型数据</td></tr><tr><td align="center"><strong>redisTemplate</strong>.opsForList()</td><td align="center">ListOperations</td><td align="center">操作List类型数据</td></tr><tr><td align="center"><strong>redisTemplate</strong>.opsForSet()</td><td align="center">SetOperations</td><td align="center">操作Set类型数据</td></tr><tr><td align="center"><strong>redisTemplate</strong>.opsForZSet()</td><td align="center">ZSetOperations</td><td align="center">操作SortedSet类型数据</td></tr><tr><td align="center"><strong>redisTemplate</strong></td><td align="center"></td><td align="center">通用的命令</td></tr></tbody></table><br/><h4 id="SpringDataRedis快速入门"><a href="#SpringDataRedis快速入门" class="headerlink" title="SpringDataRedis快速入门"></a>SpringDataRedis快速入门</h4><ul><li>SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单</li></ul><p>（1）引入spring-boot-starter-data-redis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--连接池依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）在application.yml配置Redis信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.163</span><span class="number">.200</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment"># 最大连接</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span> <span class="comment"># 最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment"># 最小空闲连接</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">100</span> <span class="comment"># 连接等待时间</span></span><br></pre></td></tr></table></figure><p>（3）注入RedisTemplate</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure><p>（4）编写测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="comment">// 插入一条string类型数据</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        <span class="comment">// 读取一条string类型数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h1 id="Redis-Serializer（Redis序列化）"><a href="#Redis-Serializer（Redis序列化）" class="headerlink" title="Redis Serializer（Redis序列化）"></a>Redis Serializer（Redis序列化）</h1><h2 id="SpringDataRedis的序列化方式"><a href="#SpringDataRedis的序列化方式" class="headerlink" title="SpringDataRedis的序列化方式"></a>SpringDataRedis的序列化方式</h2><ul><li>RedisTemplate可以接收任意Object作为值写入Redis，只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4cko09vu3y8.webp"                      width="80%"                 ><ul><li>缺点：<ul><li>可读性差</li><li>内存占用较大</li></ul></li></ul><br/><h2 id="自定义RedisTemplate的序列化方式"><a href="#自定义RedisTemplate的序列化方式" class="headerlink" title="自定义RedisTemplate的序列化方式"></a>自定义RedisTemplate的序列化方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Template</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置连接工厂</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">// 设置序列化工具</span></span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// key和 hashKey采用 string序列化</span></span><br><span class="line">        redisTemplate.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        redisTemplate.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">// value和 hashValue采用 JSON序列化</span></span><br><span class="line">        redisTemplate.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 插入一条string类型数据</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        <span class="comment">// 读取一条string类型数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSaveObject</span><span class="params">()</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;user:100&quot;</span>,<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;果冻&quot;</span>,<span class="number">28</span>));</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) redisTemplate.opsForValue().get(<span class="string">&quot;user:100&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br/><h2 id="StringRedisTemplate（RedisTemplate的序列化方式优化）"><a href="#StringRedisTemplate（RedisTemplate的序列化方式优化）" class="headerlink" title="StringRedisTemplate（RedisTemplate的序列化方式优化）"></a>StringRedisTemplate（RedisTemplate的序列化方式优化）</h2><ul><li>尽管JSON的序列化方式可以满足我们的需求，但依然存在一些问题</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2ajrax16lk74.webp"                       width="80%"                 ><ul><li><p>为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销</p></li><li><p>为了节省内存空间，我们并不会使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化</p></li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.35s7tory1l60.webp"                      width="80%"                 ><ul><li>Spring默认提供了一个StringRedisTemplate类，它的key和value的序列化方式默认就是String方式。省去了我们自定义RedisTemplate的过程：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StingRedisTemplateTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JSON工具</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testStringTemplate</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="comment">// 准备对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lily&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">// 手动序列化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">// 写入一条数据到redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:200&quot;</span>, json);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;user:200&quot;</span>);</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">user1</span> <span class="operator">=</span> mapper.readValue(val, Person.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;user1 = &quot;</span> + user1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h2 id="RedisTemplate序列化总结"><a href="#RedisTemplate序列化总结" class="headerlink" title="RedisTemplate序列化总结"></a>RedisTemplate序列化总结</h2><h3 id="RedisTemplate的两种序列化实践方案："><a href="#RedisTemplate的两种序列化实践方案：" class="headerlink" title="RedisTemplate的两种序列化实践方案："></a>RedisTemplate的两种序列化实践方案：</h3><ul><li><p>方案一：</p><ul><li>自定义RedisTemplate</li><li>修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</li></ul></li><li><p>方案二：</p><ul><li>使用StringRedisTemplate</li><li>写入Redis时，手动把对象序列化为JSON</li><li>读取Redis时，手动把读取到的JSON反序列化为对象</li></ul></li></ul><br/><h1 id="Redis企业实战"><a href="#Redis企业实战" class="headerlink" title="Redis企业实战"></a>Redis企业实战</h1><h2 id="商户点评"><a href="#商户点评" class="headerlink" title="商户点评"></a>商户点评</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6uz0qkh3xio0.webp"                      width="80%"                 ><br/><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>短信登录</li><li>商户查询缓存</li><li>优惠券秒杀</li><li>达人探店</li><li>好友关注</li><li>附近的商户</li><li>用户签到</li><li>UV统计</li></ul><br/><h3 id="短信登录"><a href="#短信登录" class="headerlink" title="短信登录"></a>短信登录</h3><h4 id="（1）导入商户点评项目"><a href="#（1）导入商户点评项目" class="headerlink" title="（1）导入商户点评项目"></a>（1）导入商户点评项目</h4><ul><li><a class="link"   href="https://gitee.com/ratears/data-resource/tree/master/db/redis/heima-dianping-init_and_import" >项目下载地址<i class="fas fa-external-link-alt"></i></a></li></ul><blockquote><p><a class="link"   href="https://gitee.com/ratears/data-resource/blob/master/db/redis/heima-dianping-init_and_import/hm-dianping.zip" >hm-dianping.zip<i class="fas fa-external-link-alt"></i></a> (将其下载解压缩后复制到idea工作空间，然后利用idea打开即可)（修改自己的MySQL和Redis配置）</p><ul><li>启动项目后，在浏览器访问：<a class="link"   href="http://localhost:8081/shop-type/list" >http://localhost:8081/shop-type/list<i class="fas fa-external-link-alt"></i></a> ，如果可以看到数据则证明运行没有问题</li></ul><p><a class="link"   href="https://gitee.com/ratears/data-resource/blob/master/db/redis/heima-dianping-init_and_import/hmdp.sql" >hmdp.sql<i class="fas fa-external-link-alt"></i></a>（导入SQL文件。Mysql的版本采用5.7及以上版本）（注意先创建数据库）</p><p><a class="link"   href="https://gitee.com/ratears/data-resource/blob/master/db/redis/heima-dianping-init_and_import/nginx-1.18.0.zip" >nginx-1.18.0.zip<i class="fas fa-external-link-alt"></i></a>（windows版本。解压缩后启动即可）</p><ul><li>访问: <a class="link"   href="http://127.0.0.1:8080/" >http://127.0.0.1:8080<i class="fas fa-external-link-alt"></i></a> ，即可看到页面</li></ul></blockquote><br/><img                       lazyload                     src="/images/loading.svg"                     data-src="https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.32ghgq3ldhe0.webp?raw=true"                      width="80%"                ><br/><p>（2）基于Session实现登录</p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.1jcturrchsbk.webp?raw=true"                      width="90%"                 ><ul><li>集群的session共享问题</li><li>基于Redis实现共享session登录</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识Redis&quot;&gt;&lt;a href=&quot;#初识Redis&quot; class=&quot;headerlink&quot; title=&quot;初识Redis&quot;&gt;&lt;/a&gt;初识Redis&lt;/h1&gt;&lt;h2 id=&quot;SQL与NoSQL&quot;&gt;&lt;a href=&quot;#SQL与NoSQL&quot; class=&quot;header</summary>
      
    
    
    
    <category term="database" scheme="https://sonzonzy.github.io/categories/database/"/>
    
    <category term="redis" scheme="https://sonzonzy.github.io/categories/database/redis/"/>
    
    
    <category term="redis" scheme="https://sonzonzy.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://sonzonzy.github.io/Git/"/>
    <id>https://sonzonzy.github.io/Git/</id>
    <published>2022-06-21T16:36:47.000Z</published>
    <updated>2022-06-21T16:36:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1、要清楚执行每个git命令后 提示信息表达的意思，不会的单词要记忆，写在这个文档里面</p></blockquote><h1 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h1><h2 id="什么是版本控制系统"><a href="#什么是版本控制系统" class="headerlink" title="什么是版本控制系统"></a>什么是版本控制系统</h2><ul><li>版本控制系统是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统</li></ul><h2 id="为什么要使用版本控制"><a href="#为什么要使用版本控制" class="headerlink" title="为什么要使用版本控制"></a>为什么要使用版本控制</h2><ul><li>软件开发中采用版本控制系统是个明智的选择</li><li>有了它你就可以将某个文件回溯到之前的状态,甚至将整个项目都回退到过去某个时间点的状态</li><li>就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子</li><li>你可以比较文件的变化细节,查出最后是谁修改了哪个地方,从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等</li><li>但额外增加的工作量却微乎其微</li></ul><h2 id="版本管理的演变"><a href="#版本管理的演变" class="headerlink" title="版本管理的演变"></a>版本管理的演变</h2><ul><li>VCS 出现前<ul><li>用目录拷贝区别不不同版本</li><li>公共文件容易易被覆盖</li><li>成员沟通成本很高，代码集成效率低下</li></ul></li><li>集中式 VCS<ul><li>有集中的版本管理服务器</li><li>具备文件版本管理和分支管理能力</li><li>集成效率有明显地提高</li><li>客户端必须时刻和服务器相连</li></ul></li><li>分布式 VCS<ul><li>服务端和客户端都有完整的版本库</li><li>脱离服务端，客户端照样可以管理理版本</li><li>查看历史和版本比较等多数操作，都不不需要访问服务器器，比集中式 VCS 更更能提⾼高版本管理理效率</li></ul></li></ul><h2 id="版本控制系统的分类"><a href="#版本控制系统的分类" class="headerlink" title="版本控制系统的分类"></a>版本控制系统的分类</h2><h3 id="集中化的版本控制系统"><a href="#集中化的版本控制系统" class="headerlink" title="集中化的版本控制系统"></a>集中化的版本控制系统</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4l3axedwasg0.webp"                      width="60%"                 ><blockquote><p>集中化的版本控制系统诸如CVS, SVN 以及Perforce 等，都有一个单一的集中管理的服务器,保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器,取出最新的文件或者提交更新。多年以来,这已成为版本控制系统的标准做法,这种做法带来了许多好处,现在,每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统;要远比在各个客户端上维护本地数据库来得轻松容易。</p><p>事分两面，有好有坏。这么做最显而易见的缺点是中央服务器的<strong>单点故障</strong>。如果服务器宕机一小时，那么在这一小时内， 谁都无法提交更新，也就无法协同工作</p></blockquote><h3 id="分布式的版本控制系统"><a href="#分布式的版本控制系统" class="headerlink" title="分布式的版本控制系统"></a>分布式的版本控制系统</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4l3axedwasg0.webp"                      width="60%"                 ><ul><li>由于上面集中化版本控制系统的那些缺点，于是分布式版本控制系统面世了</li><li>在这类系统中，像Git, BitKeeper 等,<strong>客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来</strong></li><li>许多这类系统都可以指定和<strong>若干不同的远端代码仓库进行交互</strong>。这样，你就可以在同一个项目中分别和不同工作小组的人相互协作</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.2ip2z3escfc0.webp"                      width="65%"                 ><ul><li>分布式的版本控制系统在管理项目时存放的不是项目版本与版本之间的差异.它存的是索引(所需磁盘空间很少所以每个客户端都可以放下整个<br>项目的历史记录)</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.55w0uw51yhs0.webp"                      width="65%"                 ><h2 id="版本控制系统的存储方式"><a href="#版本控制系统的存储方式" class="headerlink" title="版本控制系统的存储方式"></a>版本控制系统的存储方式</h2><ul><li>世界上的版本控制总共有两种存储方式，一种是存储差异，另一种是存储快照</li><li>存储差异：存储base文件，以后每次存储base文件的更改，SVN就是这种方式</li><li>存储快照：每次更改都存储一个新文件，Git是这种方式</li></ul><h1 id="Git-基础"><a href="#Git-基础" class="headerlink" title="Git 基础"></a>Git 基础</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>Git是一个<font color=#008000>免费的</font>、<font color=#008000>开源的</font><font color=#008000><strong>分布式</strong></font><font color=red>版本控制系统</font>，可以快速高效地管理从小型到大型的项目</li></ul><h2 id="Git-简史"><a href="#Git-简史" class="headerlink" title="Git 简史"></a>Git 简史</h2><ul><li><p>Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</p></li><li><p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标</p></li></ul><h2 id="Git-的使命-x2F-目标"><a href="#Git-的使命-x2F-目标" class="headerlink" title="Git 的使命 &#x2F; 目标"></a>Git 的使命 &#x2F; 目标</h2><p>Git在设计之初就是为了搞定linux内核这种巨无霸而设计的，所以制定了自己的使命</p><ul><li>速度</li><li>简单的设计</li><li>对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</li><li>完全分布式</li><li>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</li></ul><h2 id="Git-的优点-x2F-特点"><a href="#Git-的优点-x2F-特点" class="headerlink" title="Git 的优点 &#x2F; 特点"></a>Git 的优点 &#x2F; 特点</h2><ul><li>快、非凡的性能</li><li>本地仓库</li><li>轻量级分支</li><li>分布式</li><li>各种工作流</li><li>最优的存储能力</li><li>开源的</li><li>很容易易做备份</li><li>支持离线操作</li><li>很容易易定制工作流程</li></ul><h2 id="Git-的结构"><a href="#Git-的结构" class="headerlink" title="Git 的结构"></a>Git 的结构</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.1756qy15ac5c.webp"                      width="60%"                 ><h2 id="Git-的交互方式"><a href="#Git-的交互方式" class="headerlink" title="Git 的交互方式"></a>Git 的交互方式</h2><h3 id="代码托管中心是干嘛的"><a href="#代码托管中心是干嘛的" class="headerlink" title="代码托管中心是干嘛的"></a>代码托管中心是干嘛的</h3><ul><li>我们已经有了本地库，本地库可以帮我们进行版本控制，为什么还需要代码托管中心呢？<br>它的任务是帮我们维护远程库</li></ul><h3 id="本地库和远程库的交互方式"><a href="#本地库和远程库的交互方式" class="headerlink" title="本地库和远程库的交互方式"></a>本地库和远程库的交互方式</h3><h4 id="团队内部协作"><a href="#团队内部协作" class="headerlink" title="团队内部协作"></a>团队内部协作</h4><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.6ia1ri43p640.webp"                                      ><h4 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h4><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.n89r9sjz3gw.webp"                                      ><h3 id="托管中心种类"><a href="#托管中心种类" class="headerlink" title="托管中心种类"></a>托管中心种类</h3><ul><li>局域网环境下：可以搭建 GitLab服务器作为代码托管中心，GitLab可以自己去搭建</li><li>外网环境下：可以由GitHub或者Gitee作为代码托管中心，GitHub或者Gitee是现成的托管中心，不用自己去搭建</li></ul><h2 id="Git-的下载安装-x2F-基本设置"><a href="#Git-的下载安装-x2F-基本设置" class="headerlink" title="Git 的下载安装 &#x2F; 基本设置"></a>Git 的下载安装 &#x2F; 基本设置</h2><ul><li>下载安装略（官网下载，一般情况傻瓜式安装即可）</li><li>查看git安装版本（是否安装成功）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h3 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h3><ul><li>配置<code>user.name</code>和<code>user.email</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global  user.name <span class="string">&#x27;sonzonzy&#x27;</span></span><br><span class="line">git config --global  user.email <span class="string">&#x27;sonzonzy@gmail.com&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="config-的三个作用域"><a href="#config-的三个作用域" class="headerlink" title="config 的三个作用域"></a>config 的三个作用域</h3><ul><li>缺省等同于 local</li><li>优先级：local &gt; global &gt; system</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># local只对当前仓库有效</span></span><br><span class="line">git config --<span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># global 对当前登录用户所有仓库有效</span></span><br><span class="line">git config --global</span><br><span class="line"></span><br><span class="line"><span class="comment"># system 对系统的所有用户有效</span></span><br><span class="line">git config --system</span><br></pre></td></tr></table></figure><h3 id="显示-config-的配置"><a href="#显示-config-的配置" class="headerlink" title="显示 config 的配置"></a>显示 config 的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --list --<span class="built_in">local</span></span><br><span class="line">git config --list --global</span><br><span class="line">git config --list --system</span><br></pre></td></tr></table></figure><h3 id="信息设置与清除"><a href="#信息设置与清除" class="headerlink" title="信息设置与清除"></a>信息设置与清除</h3><ul><li>设置缺省等同于 local</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">local</span></span><br><span class="line">git config --global</span><br><span class="line">git config --system</span><br></pre></td></tr></table></figure><ul><li>清除–unset</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">unset</span> --<span class="built_in">local</span> user.name</span><br><span class="line">git config --<span class="built_in">unset</span> --global user.name</span><br><span class="line">git config --<span class="built_in">unset</span> --system user.name</span><br></pre></td></tr></table></figure><h1 id="Git-常用命令-amp-操作"><a href="#Git-常用命令-amp-操作" class="headerlink" title="Git 常用命令 &amp; 操作"></a>Git 常用命令 &amp; 操作</h1><h2 id="init-x2F-初始化本地仓库"><a href="#init-x2F-初始化本地仓库" class="headerlink" title="init &#x2F; 初始化本地仓库"></a>init &#x2F; 初始化本地仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在git终端进入到本地的文件夹 （例如 $ cd D:\dev\git_ws\git_demo） 执行如下命令</span></span><br><span class="line"><span class="comment">#初始化本地仓库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="add-x2F-添加到暂存区"><a href="#add-x2F-添加到暂存区" class="headerlink" title="add &#x2F; 添加到暂存区"></a>add &#x2F; 添加到暂存区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h2 id="commit-x2F-提交到本地仓库"><a href="#commit-x2F-提交到本地仓库" class="headerlink" title="commit &#x2F; 提交到本地仓库"></a>commit &#x2F; 提交到本地仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把暂存区的 文件提交到本地仓库。-m&quot;message&quot; 后的双引号 填写该次提交的说明信息</span></span><br><span class="line">git commit -m<span class="string">&quot;add test1.txt&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>注意事项</p><ul><li><p>不放在本地仓库中的文件，git是不进行管理</p></li><li><p>即使放在本地仓库的文件，git也不管理，必须通过add,commit命令操作才可以将内容提交到本地库</p></li></ul></li></ul><h2 id="status-x2F-查看工作区和暂存区的状态"><a href="#status-x2F-查看工作区和暂存区的状态" class="headerlink" title="status &#x2F; 查看工作区和暂存区的状态"></a>status &#x2F; 查看工作区和暂存区的状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h2 id="mv-x2F-重命名暂存区的文件"><a href="#mv-x2F-重命名暂存区的文件" class="headerlink" title="mv &#x2F; 重命名暂存区的文件"></a>mv &#x2F; 重命名暂存区的文件</h2><ul><li>方式一</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> readme readme.md</span><br><span class="line">git <span class="built_in">rm</span> readme</span><br><span class="line">git add readme.md</span><br><span class="line">git commit -m<span class="string">&quot;rename file&quot;</span></span><br></pre></td></tr></table></figure><ul><li>方式二</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">mv</span> readme readme.md</span><br><span class="line">git commit -m<span class="string">&#x27;file name&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="log-x2F-查看提交日志"><a href="#log-x2F-查看提交日志" class="headerlink" title="log &#x2F; 查看提交日志"></a>log &#x2F; 查看提交日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以让我们查看提交的，显示从最近到最远的日志</span></span><br><span class="line">git <span class="built_in">log</span> -n[number] --graph --online --all/[branch_name]</span><br><span class="line"><span class="comment"># -n 指定查看条数</span></span><br><span class="line"><span class="comment"># --graph 图形化查看</span></span><br><span class="line"><span class="comment"># --online 简单显示</span></span><br><span class="line"><span class="comment"># --all 显示所有分支，不加则显示当前分支</span></span><br><span class="line"><span class="comment"># branch_name 指定分支</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line"></span><br><span class="line">git reflog</span><br><span class="line"><span class="comment"># 多了信息：HEAD@&#123;数字&#125; 这个数字的含义：指针回到当前这个历史版本需要走多少步</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在浏览器打开git log 的帮助文档</span></span><br><span class="line">git <span class="built_in">help</span> --web <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="gitk-x2F-git-的gui界面"><a href="#gitk-x2F-git-的gui界面" class="headerlink" title="gitk &#x2F; git 的gui界面"></a>gitk &#x2F; git 的gui界面</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开git的gui界面</span></span><br><span class="line">gitk</span><br></pre></td></tr></table></figure><h2 id="rest-x2F-前进或者后退历史版本"><a href="#rest-x2F-前进或者后退历史版本" class="headerlink" title="rest &#x2F; 前进或者后退历史版本"></a>rest &#x2F; 前进或者后退历史版本</h2><h3 id="hard-参数"><a href="#hard-参数" class="headerlink" title="hard 参数"></a>hard 参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地库的指针移动的同时，重置暂存区，重置工作区</span></span><br><span class="line">git reset --hard [索引]</span><br></pre></td></tr></table></figure><h3 id="mixed参数"><a href="#mixed参数" class="headerlink" title="mixed参数"></a>mixed参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地库的指针移动的同时，重置暂存区，但是工作区不动</span></span><br><span class="line">git reset --mixed [索引]</span><br></pre></td></tr></table></figure><h3 id="soft参数"><a href="#soft参数" class="headerlink" title="soft参数"></a>soft参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地库的指针移动的时候，暂存区，工作区都不动</span></span><br><span class="line">git reset --soft [索引]</span><br></pre></td></tr></table></figure><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将工作区中的文件和暂存区中文件进行比较 </span></span><br><span class="line">git diff [文件名]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较工作区中和暂存区中 所有文件的差异</span></span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较暂存区和工作区中内容</span></span><br><span class="line">git diff [历史版本] [文件名] </span><br></pre></td></tr></table></figure><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习备注&quot;&gt;&lt;a href=&quot;#学习备注&quot; class=&quot;headerlink&quot; title=&quot;学习备注&quot;&gt;&lt;/a&gt;学习备注&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;1、要清楚执行每个git命令后 提示信息表达的意思，不会的单词要记忆，写在这个文档里面&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="git" scheme="https://sonzonzy.github.io/categories/git/"/>
    
    
    <category term="git" scheme="https://sonzonzy.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>《Web 协议详解与抓包实战》study notes</title>
    <link href="https://sonzonzy.github.io/%E3%80%8AWeb-%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E3%80%8Bstudy-notes/"/>
    <id>https://sonzonzy.github.io/%E3%80%8AWeb-%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E3%80%8Bstudy-notes/</id>
    <published>2022-06-13T18:00:24.000Z</published>
    <updated>2022-06-13T18:00:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-x2F-1-1协议"><a href="#HTTP-x2F-1-1协议" class="headerlink" title="HTTP&#x2F;1.1协议"></a>HTTP&#x2F;1.1协议</h1><h2 id="浏览器发起-HTTP-请求的典型场景"><a href="#浏览器发起-HTTP-请求的典型场景" class="headerlink" title="浏览器发起 HTTP 请求的典型场景"></a>浏览器发起 HTTP 请求的典型场景</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4fdm1gdg9660.webp"                      width="70%"                ><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.5ln9wca3rqw0.webp"                      width="70%"                ><h2 id="Hypertext-Transfer-Protocol-HTTP-协议"><a href="#Hypertext-Transfer-Protocol-HTTP-协议" class="headerlink" title="Hypertext Transfer Protocol (HTTP) 协议"></a>Hypertext Transfer Protocol (HTTP) 协议</h2><ul><li>a stateless application-level request&#x2F;response protocol that uses<br>extensible semantics and self-descriptive message payloads for flexible<br>interaction with network-based hypertext information systems<br>（RFC7230 2014.6）</li><li>一种无状态的、应用层的、以请求&#x2F;应答方式运行的协议，它使用可扩展的<br>语义和自描述消息格式，与基于网络的超文本信息系统灵活的互动</li></ul><h2 id="HTTP-协议格式"><a href="#HTTP-协议格式" class="headerlink" title="HTTP 协议格式"></a>HTTP 协议格式</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.37se393k1h20.webp"                      width="70%"                ><h2 id="ABNF-（扩充巴科斯-瑙尔范式）"><a href="#ABNF-（扩充巴科斯-瑙尔范式）" class="headerlink" title="ABNF （扩充巴科斯-瑙尔范式）"></a>ABNF （扩充巴科斯-瑙尔范式）</h2><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><ul><li>空白字符：用来分隔定义中的各个元素<ul><li>method SP request-target SP HTTP-version CRLF</li></ul></li><li>选择 &#x2F;：表示多个规则都是可供选择的规则<ul><li>start-line &#x3D; request-line &#x2F; status-line</li></ul></li><li>值范围 %c##-## ：<ul><li>OCTAL &#x3D; “0” &#x2F; “1” &#x2F; “2” &#x2F; “3” &#x2F; “4” &#x2F; “5” &#x2F; “6” &#x2F; “7” 与 OCTAL &#x3D; %x30-37 等价</li></ul></li><li>序列组合 ()：将规则组合起来，视为单个元素</li><li>不定量重复 m*n：<ul><li>元素表示零个或更多元素： *( header-field CRLF )</li><li>1* 元素表示一个或更多元素，2*4 元素表示两个至四个元素</li></ul></li><li>可选序列 []：<ul><li>[ message-body ]</li></ul></li></ul><h3 id="核心规则"><a href="#核心规则" class="headerlink" title="核心规则"></a>核心规则</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4p8vbzjyq9a0.webp"                      width="70%"                ><h2 id="基于-ABNF-描述的-HTTP-协议格式"><a href="#基于-ABNF-描述的-HTTP-协议格式" class="headerlink" title="基于 ABNF 描述的 HTTP 协议格式"></a>基于 ABNF 描述的 HTTP 协议格式</h2><p>HTTP-message &#x3D; start-line *( header-field CRLF ) CRLF [ message-body ]</p><ul><li>start-line &#x3D; request-line &#x2F; status-line<ul><li>request-line &#x3D; method SP request-target SP HTTP-version CRLF</li><li>status-line &#x3D; HTTP-version SP status-code SP reason-phrase CRLF</li></ul></li><li>header-field &#x3D; field-name “:” OWS field-value OWS<ul><li>OWS &#x3D; *( SP &#x2F; HTAB )</li><li>field-name &#x3D; token</li><li>field-value &#x3D; *( field-content &#x2F; obs-fold )</li></ul></li><li>message-body &#x3D; *OCTET</li></ul><h2 id="OSI（Open-System-Interconnection-Reference-Model）概念模型"><a href="#OSI（Open-System-Interconnection-Reference-Model）概念模型" class="headerlink" title="OSI（Open System Interconnection Reference Model）概念模型"></a>OSI（Open System Interconnection Reference Model）概念模型</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4zpowyuqy1o0.webp"                      width="70%"                ><h2 id="OSI-模型与-TCP-x2F-IP-模型对照"><a href="#OSI-模型与-TCP-x2F-IP-模型对照" class="headerlink" title="OSI 模型与 TCP&#x2F;IP 模型对照"></a>OSI 模型与 TCP&#x2F;IP 模型对照</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.7bh90wjw4980.webp"                      width="70%"                ><h2 id="Wireshark-抓包及分析工具"><a href="#Wireshark-抓包及分析工具" class="headerlink" title="Wireshark 抓包及分析工具"></a>Wireshark 抓包及分析工具</h2><h2 id="报文头部"><a href="#报文头部" class="headerlink" title="报文头部"></a>报文头部</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.6w78b2tep5k0.webp"                      width="70%"                ><h2 id="Roy-Thomas-Fielding-与-HTTP-x2F-1-1"><a href="#Roy-Thomas-Fielding-与-HTTP-x2F-1-1" class="headerlink" title="Roy Thomas Fielding 与 HTTP&#x2F;1.1"></a>Roy Thomas Fielding 与 HTTP&#x2F;1.1</h2><ul><li><p>参与制订 HTTP&#x2F;1.0 规范（1996.5）</p></li><li><p>参与制订 URI 规范（1998.8）</p></li><li><p>主导制订 HTTP&#x2F;1.1 规范（1999.6）</p></li><li><p>2000 年发布指导 HTTP&#x2F;1.1 规范制订的论文</p><ul><li>《Architectural Style and the Design of Network-based Software<br>Architectures》，即我们常谈的Representational State Transfer (REST)架构</li></ul></li><li><p>Apache基金会（The Apache Software Foundation）共同创始人</p><ul><li>参与开发Apache httpd服务</li></ul></li></ul><h2 id="Form-Follows-Function：HTTP-协议为什么是现在这个样子"><a href="#Form-Follows-Function：HTTP-协议为什么是现在这个样子" class="headerlink" title="Form Follows Function：HTTP 协议为什么是现在这个样子"></a>Form Follows Function：HTTP 协议为什么是现在这个样子</h2><ul><li><p>HTTP 协议</p><ul><li>Roy Thomas Fielding：HTTP 主要作者，REST 架构作者</li></ul></li><li><p>URI：统一资源标识符</p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.5k1vc39i85k0.webp"                      width="70%"                ></li></ul><h2 id="HTTP-解决了什么问题？"><a href="#HTTP-解决了什么问题？" class="headerlink" title="HTTP 解决了什么问题？"></a>HTTP 解决了什么问题？</h2><h4 id="解决-WWW-信息交互必须面对的需求："><a href="#解决-WWW-信息交互必须面对的需求：" class="headerlink" title="解决 WWW 信息交互必须面对的需求："></a>解决 WWW 信息交互必须面对的需求：</h4><p>• 低门槛<br>• 可扩展性：巨大的用户群体，超长的寿命<br>• 分布式系统下的 Hypermedia：大粒度数据的网络传输<br>• Internet 规模<br>• 无法控制的 scalability<br>• 不可预测的负载、非法格式的数据、恶意消息<br>• 客户端不能保持所有服务器信息，服务器不能保持多个请求间的状态信息<br>• 独立的组件部署：新老组件并存<br>• 向前兼容：自 1993 年起 HTTP0.9\1.0（1996）已经被广泛使用</p><h2 id="评估-Web-架构的关键属性"><a href="#评估-Web-架构的关键属性" class="headerlink" title="评估 Web 架构的关键属性"></a>评估 Web 架构的关键属性</h2><h3 id="HTTP-协议应当在以下属性中取得可接受的均衡："><a href="#HTTP-协议应当在以下属性中取得可接受的均衡：" class="headerlink" title="HTTP 协议应当在以下属性中取得可接受的均衡："></a>HTTP 协议应当在以下属性中取得可接受的均衡：</h3><ol><li><p>性能 Performance：影响高可用的关键因素</p></li><li><p>可伸缩性 Scalability：支持部署可以互相交互的大量组件</p></li><li><p>简单性 Simplicity：易理解、易实现、易验证</p></li><li><p>可见性 Visiable：对两个组件间的交互进行监视或者仲裁的能力。如缓存、分层设计等</p></li><li><p>可移植性 Portability：在不同的环境下运行的能力</p></li><li><p>可靠性 Reliability：出现部分故障时，对整体影响的程度</p></li><li><p>可修改性 Modifiability：对系统作出修改的难易程度，由可进化性、可定制性、可扩展<br>性、可配置性、可重用性构成</p></li></ol><h2 id="架构属性：性能"><a href="#架构属性：性能" class="headerlink" title="架构属性：性能"></a>架构属性：性能</h2><ul><li>网络性能 Network Performance<ul><li>Throughput 吞吐量：小于等于带宽 bandwidth</li><li>Overhead 开销：首次开销，每次开销</li></ul></li><li>用户感知到的性能 User-perceived Performance<ul><li>Latency 延迟：发起请求到接收到响应的时间</li><li>Completion 完成时间：完成一个应用动作所花费的时间</li></ul></li><li>网络效率 Network Efficiency<ul><li>重用缓存、减少交互次数、数据传输距离更近、COD</li></ul></li></ul><h2 id="架构属性：可修改性"><a href="#架构属性：可修改性" class="headerlink" title="架构属性：可修改性"></a>架构属性：可修改性</h2><p>• 可进化性 Evolvability：一个组件独立升级而不影响其他组件<br>• 可扩展性 Extensibility ：向系统添加功能，而不会影响到系统的其他部分<br>• 可定制性 Customizability ：临时性、定制性地更改某一要素来提供服务，<br>不对常规客户产生影响<br>• 可配置性 Configurability ：应用部署后可通过修改配置提供新的功能<br>• 可重用性 Reusabilit ：组件可以不做修改在其他应用在使用</p><h2 id="5-种架构风格"><a href="#5-种架构风格" class="headerlink" title="5 种架构风格"></a>5 种架构风格</h2><ul><li>数据流风格 Data-flow Styles<ul><li>优点：简单性、可进化性、可扩展性、可配置性、可重用性</li></ul></li><li>复制风格 Replication Styles<ul><li>优点：用户可察觉的性能、可伸缩性，网络效率、可靠性也可以提到提升</li></ul></li><li>分层风格 Hierarchical Styles<ul><li>优点：简单性、可进化性、可伸缩性</li></ul></li><li>移动代码风格 Mobile Code Styles<ul><li>优点：可移植性、可扩展性、网络效率</li></ul></li><li>点对点风格 Peer-to-Peer Styles<ul><li>优点：可进化性、可重用性、可扩展性、可配置性</li></ul></li></ul><h2 id="Chrome-抓包：快速定位-HTTP-协议问题"><a href="#Chrome-抓包：快速定位-HTTP-协议问题" class="headerlink" title="Chrome 抓包：快速定位 HTTP 协议问题"></a>Chrome 抓包：快速定位 HTTP 协议问题</h2><p><a class="link"   href="https://developers.google.com/web/tools/chrome-devtools/network/" >chrome-devtools<i class="fas fa-external-link-alt"></i></a></p><h3 id="Chrome-抓包：Network-面板"><a href="#Chrome-抓包：Network-面板" class="headerlink" title="Chrome 抓包：Network 面板"></a>Chrome 抓包：Network 面板</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.ae6gkxyy8ws.webp"                      width="90%"                ><ul><li>控制器：控制面板的外观与功能</li><li>过滤器：过滤请求列表中显示的资源<ul><li>按住 Command （Mac）或 Ctrl （Window &#x2F; Linux），然后点击过滤器可以<br>同时选择多个过滤器</li></ul></li><li>概览：显示 HTTP 请求、响应的时间轴</li><li>请求列表：默认时间排序，可选择显示列</li><li>概要：请求总数、总数据量、总花费时间等</li></ul><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4sak4sx7bko0.webp"                      width="60%"                ><h3 id="过滤器：按类型"><a href="#过滤器：按类型" class="headerlink" title="过滤器：按类型"></a>过滤器：按类型</h3><ul><li>XHR、JS、CSS、Img、Media、Font、Doc、WS (WebSocket)、Manifest 或 Other<br>（此处未列出的任何其他类型）</li><li>多类型，按住 Command (Mac) 或 Ctrl（Windows、Linux）</li><li>按时间过滤：概览面板，拖动滚动条</li><li>隐藏 Data URLs：CSS 图片等小文件以 BASE64 格式嵌入 HTML 中，以减少 HTTP<br>请求数</li></ul><h3 id="过滤器：属性过滤"><a href="#过滤器：属性过滤" class="headerlink" title="过滤器：属性过滤"></a>过滤器：属性过滤</h3><ul><li><p>domain：仅显示来自指定域的资源。 您可以使用通配符字符 (*) 纳入多个域</p></li><li><p>has-response-header：显示包含指定 HTTP 响应标头的资源</p></li><li><p>is：使用 is:running 可以查找 WebSocket 资源，is:from-cache 可查找缓存读出的资源</p></li><li><p>larger-than： 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为<br>1k</p></li><li><p>method：显示通过指定 HTTP 方法类型检索的资源</p></li><li><p>mime-type：显示指定 MIME 类型的资源</p></li><li><p>mixed-content：显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源<br>(mixed-content:displayed)。</p></li><li><p>scheme：显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资<br>源。</p></li><li><p>set-cookie-domain：显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。</p></li><li><p>set-cookie-name：显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。</p></li><li><p>set-cookie-value：显示具有 Set-Cookie 标头并且值与指定值匹配的资源。</p></li><li><p>status-code：仅显示 HTTP 状态代码与指定代码匹配的资源。</p></li></ul><p><strong>多属性间通过空格实现 AND 操作</strong></p><h3 id="请求列表的排序"><a href="#请求列表的排序" class="headerlink" title="请求列表的排序"></a>请求列表的排序</h3><ul><li>时间排序，默认</li><li>按列排序</li><li>按活动时间排序<ul><li>Start Time：发出的第一个请求位于顶部</li><li>Response Time：开始下载的第一个请求位于顶部</li><li>End Time：完成的第一个请求位于顶部</li><li>Total Duration：连接设置时间和请求&#x2F;响应时间最短的请求位于顶部</li><li>Latency：等待最短响应时间的请求位于顶部</li></ul></li></ul><h3 id="请求列表"><a href="#请求列表" class="headerlink" title="请求列表"></a>请求列表</h3><ul><li>Name : 资源的名称</li><li>Status : HTTP 状态代码</li><li>Type : 请求的资源的 MIME 类型</li><li>Initiator : 发起请求的对象或进程。它可能有以下几种值：<ul><li>Parser （解析器） : Chrome的 HTML 解析器发起了请求<ul><li>鼠标悬停显示 JS 脚本</li></ul></li><li>Redirect （重定向） : HTTP 重定向启动了请求</li><li>Script （脚本） : 脚本启动了请求</li><li>Other （其他） : 一些其他进程或动作发起请求，例如用户点击链接跳转到<br>页面或在地址栏中输入网址</li></ul></li><li>Size : 服务器返回的响应大小（包括头部和包体），可显示解压后大小</li><li>Time : 总持续时间，从请求的开始到接收响应中的最后一个字节</li><li>Waterfall：各请求相关活动的直观分析图</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.27b9wyvwjz9c.webp"                      width="70%"                ><h3 id="预览请求内容"><a href="#预览请求内容" class="headerlink" title="预览请求内容"></a>预览请求内容</h3><ul><li><p>查看头部</p></li><li><p>查看 cookie</p></li><li><p>预览响应正文：查看图像用</p></li><li><p>查看响应正文</p></li><li><p>时间详细分布</p></li><li><p>导出数据为 HAR 格式</p></li><li><p>查看未压缩的资源大小：Use Large Request Rows</p></li><li><p>浏览器加载时间（概览、概要、请求列表）</p><ul><li>DOMContentLoaded 事件的颜色设置为蓝色，而 load 事件设置为红色</li></ul></li><li><p>将请求数据复制到剪贴版</p><ul><li>Copy Link Address: 将请求的网址复制到剪贴板</li><li>Copy Response: 将响应包体复制到剪贴板</li><li>Copy as cURL: 以 cURL 命令形式复制请求</li><li>Copy All as cURL: 以一系列 cURL 命令形式复制所有请求</li><li>Copy All as HAR: 以 HAR 数据形式复制所有请求</li></ul></li><li><p>查看请求上下游：按住 shift 键悬停请求上，绿色是上游，红色是下游</p></li></ul><h3 id="浏览器加载时间"><a href="#浏览器加载时间" class="headerlink" title="浏览器加载时间"></a>浏览器加载时间</h3><ul><li>触发流程：<ul><li>解析 HTML 结构</li><li>加载外部脚本和样式表文件</li><li>解析并执行脚本代码 &#x2F;&#x2F; 部分脚本会阻塞页面的加载</li><li>DOM 树构建完成 &#x2F;&#x2F; DOMContentLoaded 事件</li><li>加载图片等外部文件</li><li>页面加载完毕 &#x2F;&#x2F; load 事件</li></ul></li></ul><h3 id="请求时间详细分布"><a href="#请求时间详细分布" class="headerlink" title="请求时间详细分布"></a>请求时间详细分布</h3><ul><li>Queueing: 浏览器在以下情况下对请求排队<ul><li>存在更高优先级的请求</li><li>此源已打开六个 TCP 连接，达到限值，仅适用于 HTTP&#x2F;1.0 和 HTTP&#x2F;1.1</li><li>浏览器正在短暂分配磁盘缓存中的空间</li></ul></li><li>Stalled: 请求可能会因 Queueing 中描述的任何原因而停止</li><li>DNS Lookup: 浏览器正在解析请求的 IP 地址</li><li>Proxy Negotiation: 浏览器正在与代理服务器协商请求</li><li>Request sent: 正在发送请求</li><li>ServiceWorker Preparation: 浏览器正在启动 Service Worker</li><li>Request to ServiceWorker: 正在将请求发送到 Service Worker</li><li>Waiting (TTFB): 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte<br>（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时<br>间</li><li>Content Download: 浏览器正在接收响应</li><li>Receiving Push: 浏览器正在通过 HTTP&#x2F;2 服务器推送接收此响应的数据</li><li>Reading Push: 浏览器正在读取之前收到的本地数据</li></ul><h2 id="URI的基本格式以及与URL的区别"><a href="#URI的基本格式以及与URL的区别" class="headerlink" title="URI的基本格式以及与URL的区别"></a>URI的基本格式以及与URL的区别</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTTP-x2F-1-1协议&quot;&gt;&lt;a href=&quot;#HTTP-x2F-1-1协议&quot; class=&quot;headerlink&quot; title=&quot;HTTP&amp;#x2F;1.1协议&quot;&gt;&lt;/a&gt;HTTP&amp;#x2F;1.1协议&lt;/h1&gt;&lt;h2 id=&quot;浏览器发起-HTTP-请求的典</summary>
      
    
    
    
    <category term="web" scheme="https://sonzonzy.github.io/categories/web/"/>
    
    <category term="network" scheme="https://sonzonzy.github.io/categories/web/network/"/>
    
    
    <category term="wireshark" scheme="https://sonzonzy.github.io/tags/wireshark/"/>
    
  </entry>
  
  <entry>
    <title>《透视 HTTP 协议》study notes</title>
    <link href="https://sonzonzy.github.io/%E3%80%8A%E9%80%8F%E8%A7%86-HTTP-%E5%8D%8F%E8%AE%AE%E3%80%8Bstudy-notes/"/>
    <id>https://sonzonzy.github.io/%E3%80%8A%E9%80%8F%E8%A7%86-HTTP-%E5%8D%8F%E8%AE%AE%E3%80%8Bstudy-notes/</id>
    <published>2022-06-12T13:37:18.000Z</published>
    <updated>2022-06-12T13:37:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开篇词-1讲"><a href="#开篇词-1讲" class="headerlink" title="开篇词 (1讲)"></a>开篇词 (1讲)</h1><h2 id="开篇词｜To-Be-a-HTTP-Hero"><a href="#开篇词｜To-Be-a-HTTP-Hero" class="headerlink" title="开篇词｜To Be a HTTP Hero"></a>开篇词｜To Be a HTTP Hero</h2><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开篇词-1讲&quot;&gt;&lt;a href=&quot;#开篇词-1讲&quot; class=&quot;headerlink&quot; title=&quot;开篇词 (1讲)&quot;&gt;&lt;/a&gt;开篇词 (1讲)&lt;/h1&gt;&lt;h2 id=&quot;开篇词｜To-Be-a-HTTP-Hero&quot;&gt;&lt;a href=&quot;#开篇词｜To-Be-a-</summary>
      
    
    
    
    <category term="network" scheme="https://sonzonzy.github.io/categories/network/"/>
    
    <category term="http" scheme="https://sonzonzy.github.io/categories/network/http/"/>
    
    
    <category term="http" scheme="https://sonzonzy.github.io/tags/http/"/>
    
    <category term="network" scheme="https://sonzonzy.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>《MySQL 必知必会》study notes</title>
    <link href="https://sonzonzy.github.io/%E3%80%8AMySQL-%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8Bstudy-notes/"/>
    <id>https://sonzonzy.github.io/%E3%80%8AMySQL-%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8Bstudy-notes/</id>
    <published>2022-06-04T06:56:48.000Z</published>
    <updated>2022-06-04T06:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>近期学习了极客时间的专栏《MySQL 必知必会》，对专栏的核心知识做了学习笔记，便于复习</li></ul><br/><h1 id="课前准备-2讲"><a href="#课前准备-2讲" class="headerlink" title="课前准备 (2讲)"></a>课前准备 (2讲)</h1><h2 id="开篇词-在实战中学习，是解锁MySQL技能的最佳方法"><a href="#开篇词-在实战中学习，是解锁MySQL技能的最佳方法" class="headerlink" title="开篇词-在实战中学习，是解锁MySQL技能的最佳方法"></a>开篇词-在实战中学习，是解锁MySQL技能的最佳方法</h2><ul><li>熟练使用MySQL，对技术人来说变得越来越重要，是我们拿到心仪Offer的敲门砖</li><li><font color="red"><strong>最重要的绝对不是你的知识储备量，而是你解决实际问题的能力</strong></font></li><li><strong>正确的学习方法，远比你投入的时间更重要</strong>。而实战，就是最高效的方法</li><li><strong>项目的实际需求–&gt;解决问题所需的知识点–&gt;用好这些知识的实战经验</strong></li></ul><br/><h1 id="实践篇-13讲"><a href="#实践篇-13讲" class="headerlink" title="实践篇 (13讲)"></a>实践篇 (13讲)</h1><h2 id="01-存储：一个完整的数据存储过程是怎样的？"><a href="#01-存储：一个完整的数据存储过程是怎样的？" class="headerlink" title="01-存储：一个完整的数据存储过程是怎样的？"></a>01-存储：一个完整的数据存储过程是怎样的？</h2><ul><li>一个完整的<strong>数据存储过程总共有4步，分别是创建数据库、确认字段、创建数据表、插入数据</strong></li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4qktlsqna5y0.webp"                      width="65%"                ><ul><li>MySQL数据库系统从大到小依次是数据库服务器、数据库、数据表、数据表的行与列</li><li><strong>数据库是MySQL里面最大的存储单元</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> CREATE DATABASE `demo`  DEFAULT CHARACTER SET utf8mb4;</span><br><span class="line"></span><br><span class="line">(root@localhost) [demo]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| dbt3_s1            |</span><br><span class="line">| demo               |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li><p>“information_schema”是MySQL系统自带的数据库，主要保存MySQL数据库服务器的系统信息，比如数据库的名称、数据表的名称、字段名称、存取权限、数据文件所在的文件夹和系统使用的文件夹，等等。</p></li><li><p>“performance_schema”是MySQL系统自带的数据库，可以用来监控MySQL的各类性能指标</p></li><li><p>“sys”数据库是MySQL系统自带的数据库，主要作用是，以一种更容易被理解的方式展示MySQL数据库服务器的各类性能指标，帮助系统管理员和开发人员监控MySQL的技术性能</p></li><li><p>“mysql”数据库保存了MySQL数据库服务器运行时需要的系统信息，比如数据文件夹、当前使用的字符集、约束检查信息，等等</p></li><li><p><strong>创建表的时候，最好指明数据库</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE demo.test</span><br><span class="line">( </span><br><span class="line">  barcode text,</span><br><span class="line">  goodsname text,</span><br><span class="line">  price int</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line">describe demo.test;</span><br></pre></td></tr></table></figure><h3 id="如何设置主键"><a href="#如何设置主键" class="headerlink" title="如何设置主键"></a>如何设置主键</h3><ul><li><p>MySQL中数据表的主键，是表中的一个字段或者几个字段的组合。它主要有3个特征</p><ul><li>必须唯一，不能重复；</li><li>不能是空；</li><li>必须可以唯一标识数据表中的记录</li></ul></li><li><p>如果数据表中所有的字段都有重复的可能。<strong>我们可以自己添加一个不会重复的字段来做主键</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE demo.test ADD COLUMN itemnumber int PRIMARY KEY AUTO_INCREMENT;</span><br></pre></td></tr></table></figure><h2 id="02-字段：这么多字段类型，该怎么定义？"><a href="#02-字段：这么多字段类型，该怎么定义？" class="headerlink" title="02-字段：这么多字段类型，该怎么定义？"></a>02-字段：这么多字段类型，该怎么定义？</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5qvu0awjo5s0.webp"                      width="75%"                ><ul><li>最佳实践<ul><li>在评估用哪种整数类型的时候，你<strong>需要考虑存储空间和可靠性的平衡问题</strong></li><li><strong>确保数据不会超过取值范围</strong>，再去考虑如何节省存储空间</li></ul></li></ul><h3 id="浮点数类型和定点数类型"><a href="#浮点数类型和定点数类型" class="headerlink" title="浮点数类型和定点数类型"></a>浮点数类型和定点数类型</h3><ul><li>FLOAT表示单精度浮点数</li><li>DOUBLE表示双精度浮点数</li><li>REAL默认就是DOUBLE。如果你把SQL模式设定为启用“REAL_AS_FLOAT”，那么，MySQL就认为REAL是FLOAT<ul><li><code>SET sql_mode = &quot;REAL_AS_FLOAT&quot;;</code></li></ul></li><li>FLOAT占用字节数少，取值范围小；DOUBLE占用字节数多，取值范围也大</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3rxrxdypui80.webp"                      width="70%"                 ><ul><li>为什么浮点数类型的无符号数取值范围，只相当于有符号数取值范围的一半，也就是只相当于有符号数取值范围大于等于零的部分呢？</li></ul><blockquote><p>原因是，MySQL是按照这个格式存储浮点数的：符号（S）、尾数（M）和阶码（E）。因此，无论有没有符号，MySQL的浮点数都会存储表示符号的部分。因此，所谓的无符号数取值范围，其实就是有符号数取值范围大于等于零的部分。</p></blockquote><h4 id="浮点数类型有个缺陷，就是不精准"><a href="#浮点数类型有个缺陷，就是不精准" class="headerlink" title="浮点数类型有个缺陷，就是不精准"></a><strong>浮点数类型有个缺陷，就是不精准</strong></h4><ul><li>问题还是<strong>出在MySQL对浮点类型数据的存储方式上</strong></li></ul><blockquote><p>MySQL用4个字节存储FLOAT类型数据，用8个字节来存储DOUBLE类型数据。无论哪个，都是采用二进制的方式来进行存储的。比如9.625，用二进制来表达，就是1001.101，或者表达成1.001101×2^3。看到了吗？如果尾数不是0或5（比如9.624），你就无法用一个二进制数来精确表达。怎么办呢？就只好在取值允许的范围内进行近似（四舍五入）。</p><p>为什么数据类型是DOUBLE的时候，我们得到的结果误差更小一些，而数据类型是FLOAT的时候，误差会更大一下。原因就是，DOUBLE有8位字节，精度更高</p></blockquote><h4 id="定点数类型：DECIMAL"><a href="#定点数类型：DECIMAL" class="headerlink" title="定点数类型：DECIMAL"></a><strong>定点数类型：DECIMAL</strong></h4><ul><li>DECIMAL的存储方式决定了它一定是精准的</li></ul><blockquote><p>浮点数类型是把十进制数转换成二进制数存储，DECIMAL则不同，它是把十进制数的整数部分和小数部分拆开，分别转换成十六进制数，进行存储。这样，所有的数值，就都可以精准表达了，不会存在因为无法表达而损失精度的问题</p></blockquote><h4 id="浮点数和定点数的特点-x2F-最佳实践"><a href="#浮点数和定点数的特点-x2F-最佳实践" class="headerlink" title="浮点数和定点数的特点&#x2F;最佳实践"></a>浮点数和定点数的特点&#x2F;最佳实践</h4><blockquote><p>浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等）；定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景（比如涉及金额计算的场景）</p></blockquote><h3 id="文本类型"><a href="#文本类型" class="headerlink" title="文本类型"></a>文本类型</h3><ul><li><p>CHAR(M)：固定长度字符串。CHAR(M)类型必须预先定义字符串长度。如果太短，数据可能会超出范围；如果太长，又浪费存储空间。</p></li><li><p>VARCHAR(M)： 可变长度字符串。VARCHAR(M)也需要预先知道字符串的最大长度，不过只要不超过这个最大长度，具体存储的时候，是按照实际字符串长度存储的。</p></li><li><p>TEXT：字符串。系统自动按照实际长度存储，不需要预先定义长度。</p></li><li><p>ENUM： 枚举类型，取值必须是预先设定的一组字符串值范围之内的一个，必须要知道字符串所有可能的取值。</p></li><li><p>SET：是一个字符串对象，取值必须是在预先设定的字符串值范围之内的0个或多个，也必须知道字符串所有可能的取值。</p></li><li><p>TEXT类型也有4种，它们的区别就是最大长度不同。</p><ul><li><p>TINYTEXT：占用255字符。</p></li><li><p>TEXT： 占用65535字符。</p></li><li><p>MEDIUMTEXT：占用16777215字符。</p></li><li><p>LONGTEXT： 占用4294967295字符（相当于4GB）</p></li></ul></li><li><p>TEXT也有一个问题：<strong>由于实际存储的长度不确定，MySQL不允许TEXT类型的字段做主键。遇到这种情况，你只能采用CHAR(M)，或者VARCHAR(M)</strong></p></li><li><p>最佳实践</p><ul><li>项目中，只要不是主键字段，就可以按照数据可能的最大长度，选择这几种TEXT类型中的的一种，作为存储字符串的数据类型</li></ul></li></ul><h3 id="日期与时间类型"><a href="#日期与时间类型" class="headerlink" title="日期与时间类型"></a>日期与时间类型</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4fo8vblt22w0.webp"                      width="70%"                 ><ul><li>最佳实践</li></ul><blockquote><p><strong>在实际项目中，尽量用DATETIME类型</strong>。因为这个数据类型包括了完整的日期和时间信息，使用起来比较方便</p><p>为了确保数据的完整性和系统的稳定性，优先考虑使用DATETIME类型。因为虽然DATETIME类型占用的存储空间最多，但是它表达的时间最为完整，取值范围也最大</p></blockquote><ul><li>为什么时间类型TIME的取值范围不是-23:59:59～23:59:59呢</li></ul><blockquote><p>原因是MySQL设计的TIME类型，不光表示一天之内的时间，而且可以用来表示一个时间间隔，这个时间间隔可以超过24小时。</p></blockquote><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><blockquote><p>在定义数据类型时，如果确定是整数，就用INT；如果是小数，一定用定点数类型DECIMAL；如果是字符串，只要不是主键，就用TEXT；如果是日期与时间，就用DATETIME。</p></blockquote><h2 id="03-表：怎么创建和修改数据表？"><a href="#03-表：怎么创建和修改数据表？" class="headerlink" title="03 | 表：怎么创建和修改数据表？"></a>03 | 表：怎么创建和修改数据表？</h2><br/><h1 id="SQL汇总"><a href="#SQL汇总" class="headerlink" title="SQL汇总"></a>SQL汇总</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-- 创建数据库</span><br><span class="line">CREATE DATABASE demo；</span><br><span class="line">-- 删除数据库</span><br><span class="line">DROP DATABASE demo；</span><br><span class="line">-- 查看数据库</span><br><span class="line">SHOW DATABASES;</span><br><span class="line">-- 创建数据表：</span><br><span class="line">CREATE TABLE demo.test</span><br><span class="line">(  </span><br><span class="line">  barcode text,</span><br><span class="line">  goodsname text,</span><br><span class="line">  price int</span><br><span class="line">); </span><br><span class="line">-- 查看表结构</span><br><span class="line">DESCRIBE demo.test;</span><br><span class="line">-- 查看所有表</span><br><span class="line">-- DESCRIBE TABLES;</span><br><span class="line">-- 添加主键</span><br><span class="line">ALTER TABLE demo.test</span><br><span class="line">ADD COLUMN itemnumber int PRIMARY KEY AUTO_INCREMENT;</span><br><span class="line">-- 向表中添加数据</span><br><span class="line">INSERT INTO demo.test</span><br><span class="line">(barcode,goodsname,price)</span><br><span class="line">VALUES (&#x27;0001&#x27;,&#x27;本&#x27;,3);</span><br><span class="line"></span><br><span class="line">-- 修改字段类型语句</span><br><span class="line">ALTER TABLE demo.goodsmaster</span><br><span class="line">MODIFY COLUMN price DOUBLE;</span><br><span class="line">-- 计算字段合计函数：</span><br><span class="line">SELECT SUM(price)</span><br><span class="line">FROM demo.goodsmaster;</span><br></pre></td></tr></table></figure><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;近期学习了极客时间的专栏《MySQL 必知必会》，对专栏的核心知识做了学习笔记，便于复习&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;

&lt;</summary>
      
    
    
    
    <category term="database" scheme="https://sonzonzy.github.io/categories/database/"/>
    
    <category term="mysql" scheme="https://sonzonzy.github.io/categories/database/mysql/"/>
    
    
    <category term="database" scheme="https://sonzonzy.github.io/tags/database/"/>
    
    <category term="mysql" scheme="https://sonzonzy.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>linux实战技能</title>
    <link href="https://sonzonzy.github.io/linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD/"/>
    <id>https://sonzonzy.github.io/linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD/</id>
    <published>2022-06-01T01:16:27.000Z</published>
    <updated>2022-06-01T01:16:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><ul><li>linux下的打包 压缩还需深入理解 和操作</li></ul><h1 id="linux-基础介绍"><a href="#linux-基础介绍" class="headerlink" title="linux 基础介绍"></a>linux 基础介绍</h1><ul><li><p>linux有两种含义</p><ul><li>一种是linus编写的开源操作系统内核</li><li>另一种是广义的操作系统</li></ul></li><li><p>内核版本（分为三个部分）</p><ul><li>主版本号、次版本号、末版本号</li><li>次版本号是奇数为开发版本，偶数为稳定版</li></ul></li></ul><h2 id="linux-常见目录介绍"><a href="#linux-常见目录介绍" class="headerlink" title="linux 常见目录介绍"></a>linux 常见目录介绍</h2><ul><li>&#x2F; 根目录</li><li>&#x2F;root root用户家目录</li><li>&#x2F;home&#x2F;username 普通用户的家目录</li><li>&#x2F;etc 配置文件目录</li><li>&#x2F;bin 命令目录</li><li>&#x2F;sbin 管理命令目录</li><li>&#x2F;usr&#x2F;bin &#x2F;usr&#x2F;sbin 系统预装的其它命令</li></ul><h2 id="linux-关机-x2F-重启-命令"><a href="#linux-关机-x2F-重启-命令" class="headerlink" title="linux 关机 &#x2F; 重启 命令"></a>linux 关机 &#x2F; 重启 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关机</span></span><br><span class="line">init 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 延时关机 19:30关机</span></span><br><span class="line">shutdown -h 19:30</span><br><span class="line"></span><br><span class="line"><span class="comment"># 延时30分钟关机</span></span><br><span class="line">shutdown -h +30 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h1 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># man是manual的缩写</span><br><span class="line"># 演示</span><br><span class="line">man ls</span><br></pre></td></tr></table></figure><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><ul><li>shell 自带的命令称为内部命令，其它的是外部命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 内部命令使用 help 帮助</span><br><span class="line">help cd</span><br><span class="line"></span><br><span class="line"># 外部命令使用 help 帮助</span><br><span class="line">ls --help</span><br></pre></td></tr></table></figure><h3 id="info"><a href="#info" class="headerlink" title="info"></a>info</h3><ul><li>info 帮助比 help 更详细，作为 help 的补充</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info ls</span><br></pre></td></tr></table></figure><h2 id="文件-增删改查"><a href="#文件-增删改查" class="headerlink" title="文件 - 增删改查"></a>文件 - 增删改查</h2><ul><li>linux 操作系统中，一切皆文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建非空目录 </span><br><span class="line">mkdir [参数]</span><br><span class="line"></span><br><span class="line"># -p 递归创建目录</span><br><span class="line">mkdir -p [参数]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 删除非空目录</span><br><span class="line">rm [参数]</span><br><span class="line"></span><br><span class="line"># 递归删除目录（包括目录下的所有文件）</span><br><span class="line">rm -r [参数]</span><br><span class="line"></span><br><span class="line"># 不提示，无需确认，递归删除目录</span><br><span class="line">rm -rf [参数]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 仅仅复制文件</span><br><span class="line">cp [] []</span><br><span class="line"></span><br><span class="line"># 复制文件 or 目录</span><br><span class="line">cp -r [] []</span><br><span class="line"></span><br><span class="line"># -v 查看复制提示、过程  -p 复制的文件保留原文件的时间 -a 保留权限、保留属主</span><br><span class="line">cp -vpa [] []</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 移动文件</span><br><span class="line">mv [参数] [源文件] [目标文件/目录]</span><br><span class="line"></span><br><span class="line"># 重命名</span><br><span class="line">mv [] []</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前目录下的文件</span><br><span class="line">ls [选项...] [参数...]</span><br><span class="line"></span><br><span class="line"># -l 长格式显示文件</span><br><span class="line"># -a 显示隐藏文件</span><br><span class="line"># -r 逆序显示</span><br><span class="line"># -t 按照时间顺序显示</span><br><span class="line"># -R 递归显示</span><br><span class="line"></span><br><span class="line">ll</span><br></pre></td></tr></table></figure><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><ul><li>定义：shell 内建的符号</li><li>用途：操作多个相似（有规律）的文件</li><li>常用通配符<ul><li>* 匹配任意字符串</li><li>? 匹配一个字符串</li><li>[xyz] 匹配xyz任意一个字符</li><li>[a-z] 匹配一个范围</li><li>[!xyz] 或 [^xyz] 不匹配</li></ul></li></ul><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch []</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 文本内容显示到终端</span><br><span class="line">cat []</span><br><span class="line"></span><br><span class="line"># 查看文件开头 -number  表示查看文件开头的number行 。不加默认查看10行</span><br><span class="line">head -5 []</span><br><span class="line"></span><br><span class="line"># 查看文件结尾 -number 表示查看文件结尾哦的number行 。不加默认查看10行  -f文件内容更新后，显示同步更新</span><br><span class="line">tail -20 -f []</span><br><span class="line"></span><br><span class="line"># 统计文件内容信息</span><br><span class="line">wc []</span><br><span class="line"></span><br><span class="line"># 查看文件行数</span><br><span class="line">wc -l []</span><br><span class="line"></span><br><span class="line">more [filename]</span><br><span class="line">less [filename]</span><br></pre></td></tr></table></figure><h2 id="打包-x2F-压缩"><a href="#打包-x2F-压缩" class="headerlink" title="打包 &#x2F; 压缩"></a>打包 &#x2F; 压缩</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习备注&quot;&gt;&lt;a href=&quot;#学习备注&quot; class=&quot;headerlink&quot; title=&quot;学习备注&quot;&gt;&lt;/a&gt;学习备注&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;linux下的打包 压缩还需深入理解 和操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;linux-基础介绍&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="linux" scheme="https://sonzonzy.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>《Java 并发编程实战》study notes</title>
    <link href="https://sonzonzy.github.io/%E3%80%8AJava-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E3%80%8Bstudy-notes/"/>
    <id>https://sonzonzy.github.io/%E3%80%8AJava-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E3%80%8Bstudy-notes/</id>
    <published>2022-05-29T17:19:06.000Z</published>
    <updated>2022-05-29T17:19:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>近期在学习极客时间的专栏《Java 并发编程实战》，对专栏的核心知识做了学习笔记，便于复习</li></ul><h1 id="开篇词-你为什么需要学习并发编程？"><a href="#开篇词-你为什么需要学习并发编程？" class="headerlink" title="开篇词 | 你为什么需要学习并发编程？"></a>开篇词 | 你为什么需要学习并发编程？</h1><ul><li>近几年，并发编程已经慢慢成为一项必备技能</li></ul><br/><h1 id="学习攻略-如何才能学好并发编程？"><a href="#学习攻略-如何才能学好并发编程？" class="headerlink" title="学习攻略 | 如何才能学好并发编程？"></a>学习攻略 | 如何才能学好并发编程？</h1><h2 id="跳出来，看全景"><a href="#跳出来，看全景" class="headerlink" title="跳出来，看全景"></a>跳出来，看全景</h2><ul><li><strong>首要之事就是你建立起一张全景图</strong></li><li>并发编程领域可以抽象成<strong>三个核心问题：分工、同步和互斥</strong></li></ul><br/><h3 id="分工"><a href="#分工" class="headerlink" title="分工"></a>分工</h3><ul><li>Java SDK 并发包里的 Executor、Fork&#x2F;Join、Future 本质上都是一种分工方法</li><li>并发编程领域总结出设计模式：生产者 - 消费者、Thread-Per-Message、Worker Thread 模式等都是用来指导你如何分工的</li></ul><blockquote><p>学习这部分内容，最佳的方式就是和现实世界做对比。例如生产者 - 消费者模式，可以类比一下餐馆里的大厨和服务员，大厨就是生产者，负责做菜，做完放到出菜口，而服务员就是消费者，把做好的菜给你端过来。不过，我们经常会发现，出菜口有时候一下子出了好几个菜，服务员是可以把这一批菜同时端给你的。其实这就是生产者 - 消费者模式的一个优点，生产者一个一个地生产数据，而消费者可以批处理，这样就提高了性能</p></blockquote><br/><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><ul><li>在并发编程领域里的同步，主要指的就是线程间的协作。<strong>一个线程执行完了一个任务，如何通知执行后续任务的线程开工</strong></li><li>协作一般是和分工相关的。Java SDK 并发包里的 Executor、Fork&#x2F;Join、Future 本质上都是分工方法，但同时也能解决线程协作的问题</li></ul><blockquote><p>例如，用 Future 可以发起一个异步调用，当主线程通过 get() 方法取结果时，主线程就会等待，当异步执行的结果返回时，get() 方法就自动返回了。主线程和异步线程之间的协作，Future 工具类已经帮我们解决了</p></blockquote><ul><li>线程协作问题，基本上都可以描述为：<strong>当某个条件不满足时，线程需要等待，当某个条件满足时，线程需要被唤醒执行</strong></li></ul><blockquote><p>例如，在生产者 - 消费者模型里：当队列满时，生产者线程等待，当队列不满时，生产者线程需要被唤醒执行；当队列空时，消费者线程等待，当队列不空时，消费者线程需要被唤醒执行</p></blockquote><ul><li>在 Java 并发编程领域，解决协作问题的核心技术是<strong>管程</strong>，<strong>管程是解决并发问题的万能钥匙</strong>。（解决线程协作问题、互斥问题）</li></ul><blockquote><p>这部分内容的学习，关键是理解管程模型，学好它就可以解决所有问题。其次是了解 Java SDK 并发包提供的几个线程协作的工具类的应用场景，用好它们可以妥妥地提高你的工作效率</p></blockquote><br/><h3 id="互斥"><a href="#互斥" class="headerlink" title="互斥"></a>互斥</h3><blockquote><p>分工、同步主要强调的是性能，但并发程序里还有一部分是关于正确性的，用专业术语叫“<strong>线程安全</strong>”。并发程序里，当多个线程同时访问同一个共享变量的时候，结果是不确定的。不确定，则意味着可能正确，也可能错误，事先是不知道的。而导致不确定的主要源头是可见性问题、有序性问题和原子性问题，为了解决这三个问题，Java 语言引入了内存模型，内存模型提供了一系列的规则，利用这些规则，我们可以避免可见性问题、有序性问题，但是还不足以完全解决线程安全问题。<strong>解决线程安全问题的核心方案还是互斥</strong>。</p></blockquote><ul><li><p><strong>互斥，指的是同一时刻，只允许一个线程访问共享变量</strong></p></li><li><p>实现互斥的核心技术就是锁</p></li></ul><blockquote><p>锁解决了安全性问题，但同时也带来了性能问题，那如何保证安全性的同时又尽量提高性能呢？可以分场景优化，Java SDK 里提供的 ReadWriteLock、StampedLock 就可以优化读多写少场景下锁的性能。还可以使用无锁的数据结构，例如 Java SDK 里提供的原子类都是基于无锁技术实现的。</p><p>除此之外，还有一些其他的方案，原理是不共享变量或者变量只允许读。这方面，Java 提供了 Thread Local 和 final 关键字，还有一种 Copy-on-write 的模式。</p><p>使用锁除了要注意性能问题外，还需要注意死锁问题。</p></blockquote><blockquote><p>这部分内容比较复杂，往往还是跨领域的，例如要理解可见性，就需要了解一些 CPU 和缓存的知识；要理解原子性，就需要理解一些操作系统的知识；很多无锁算法的实现往往也需要理解 CPU 缓存。这部分内容的学习，需要博览群书，在大脑里建立起 CPU、内存、I&#x2F;O 执行的模拟器。这样遇到问题就能得心应手了。</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2nti7fz31g60.webp"                      alt="并发编程全景图之思维导图"                ></p><br/><h2 id="钻进去，看本质"><a href="#钻进去，看本质" class="headerlink" title="钻进去，看本质"></a>钻进去，看本质</h2><ul><li>光跳出来还不够，还需要下一步，就是在某个问题上钻进去，深入理解，找到本质</li><li><strong>工程上的解决方案，一定要有理论做基础</strong></li></ul><blockquote><p>探索它背后的理论是什么。分析这些概念和结论是怎么来的，以及它们是用来解决什么问题的</p></blockquote><br/><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>要让自己的知识成体系，一定要挖掘 Java SDK 并发包背后的设计理念</li><li>分工、同步和互斥的全景图，是我对并发问题的个人总结，不一定正确，但是可以帮助我快速建立解决并发问题的思路，梳理并发编程的知识，加深认识</li><li>对于某个具体的技术，我建议你探索它背后的理论本质</li><li>探求理论本质，既能加深对技术本身的理解，也能拓展知识深度和广度，这是个一举多得的方法</li></ul><br/><h1 id="第一部分：并发理论基础"><a href="#第一部分：并发理论基础" class="headerlink" title="第一部分：并发理论基础"></a>第一部分：并发理论基础</h1><h2 id="01-可见性、原子性和有序性问题：并发编程Bug的源头"><a href="#01-可见性、原子性和有序性问题：并发编程Bug的源头" class="headerlink" title="01 | 可见性、原子性和有序性问题：并发编程Bug的源头"></a>01 | 可见性、原子性和有序性问题：并发编程Bug的源头</h2><h3 id="并发程序幕后的故事"><a href="#并发程序幕后的故事" class="headerlink" title="并发程序幕后的故事"></a>并发程序幕后的故事</h3><ul><li><strong>核心矛盾一直存在，就是这三者（CPU、内存、I&#x2F;O 设备）的速度差异</strong></li><li>为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系机构、操作系统、编译程序都做出了贡献，主要体现为：</li></ul><blockquote><ol><li>CPU 增加了缓存，以均衡与内存的速度差异；</li><li>操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I&#x2F;O 设备的速度差异；</li><li>编译程序优化指令执行次序，使得缓存能够得到更加合理地利用</li></ol></blockquote><h3 id="源头之一：缓存导致的可见性问题"><a href="#源头之一：缓存导致的可见性问题" class="headerlink" title="源头之一：缓存导致的可见性问题"></a>源头之一：缓存导致的可见性问题</h3><h3 id="源头之二：线程切换带来的原子性问题"><a href="#源头之二：线程切换带来的原子性问题" class="headerlink" title="源头之二：线程切换带来的原子性问题"></a>源头之二：线程切换带来的原子性问题</h3><h3 id="源头之三：编译优化带来的有序性问题"><a href="#源头之三：编译优化带来的有序性问题" class="headerlink" title="源头之三：编译优化带来的有序性问题"></a>源头之三：编译优化带来的有序性问题</h3><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><h3 id="课后思考"><a href="#课后思考" class="headerlink" title="课后思考"></a>课后思考</h3><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;近期在学习极客时间的专栏《Java 并发编程实战》，对专栏的核心知识做了学习笔记，便于复习&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=</summary>
      
    
    
    
    <category term="java" scheme="https://sonzonzy.github.io/categories/java/"/>
    
    <category term="concurrent" scheme="https://sonzonzy.github.io/categories/java/concurrent/"/>
    
    
    <category term="concurrent" scheme="https://sonzonzy.github.io/tags/concurrent/"/>
    
    <category term="java" scheme="https://sonzonzy.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>《Nginx体系化深度精讲》study notes</title>
    <link href="https://sonzonzy.github.io/%E3%80%8ANginx%E4%BD%93%E7%B3%BB%E5%8C%96%E6%B7%B1%E5%BA%A6%E7%B2%BE%E8%AE%B2%E3%80%8Bstudy-notes/"/>
    <id>https://sonzonzy.github.io/%E3%80%8ANginx%E4%BD%93%E7%B3%BB%E5%8C%96%E6%B7%B1%E5%BA%A6%E7%B2%BE%E8%AE%B2%E3%80%8Bstudy-notes/</id>
    <published>2022-05-23T18:47:23.000Z</published>
    <updated>2022-05-23T18:47:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx初体验"><a href="#Nginx初体验" class="headerlink" title="Nginx初体验"></a>Nginx初体验</h1><h2 id="安装第一个rpm包Nginx"><a href="#安装第一个rpm包Nginx" class="headerlink" title="安装第一个rpm包Nginx"></a>安装第一个rpm包Nginx</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载epel yum源</span></span><br><span class="line"><span class="attribute">yum</span> install epel-release -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看yum源里可安装的nginx</span></span><br><span class="line">yum list all |grep nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载nginx</span></span><br><span class="line">yum install nginx -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出 nginx 安装的文件</span></span><br><span class="line">rpm -ql nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nginx启动文件所在目录</span></span><br><span class="line">rpm -ql nginx |grep bin</span><br><span class="line"></span><br><span class="line">/sur/sbin/nginx</span><br></pre></td></tr></table></figure><br/><h1 id="Nginx进程结构与热部署"><a href="#Nginx进程结构与热部署" class="headerlink" title="Nginx进程结构与热部署"></a>Nginx进程结构与热部署</h1><h2 id="Nginx的进程结构"><a href="#Nginx的进程结构" class="headerlink" title="Nginx的进程结构"></a>Nginx的进程结构</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/56b03da1dfa88b5a292f320a90fbb9d.2bzqwmpmcuas.webp"                      width="80%"                ><ul><li>真正处理请求的不是 master process，二是 worker process</li></ul><br/><h2 id="Linux的信号量管理机制"><a href="#Linux的信号量管理机制" class="headerlink" title="Linux的信号量管理机制"></a>Linux的信号量管理机制</h2><ul><li>linux中的所有信号量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]<span class="comment"># kill -l</span></span><br><span class="line"> 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP</span><br><span class="line"> 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1</span><br><span class="line">11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM</span><br><span class="line">16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP</span><br><span class="line">21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR</span><br><span class="line">31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-1  64) SIGRTMAX</span><br></pre></td></tr></table></figure><ul><li>常用信号量</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2l38lbs30tc0.webp"                      width="80%"                ><h2 id="利用信号量管理Nginx"><a href="#利用信号量管理Nginx" class="headerlink" title="利用信号量管理Nginx"></a>利用信号量管理Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭nginx</span></span><br><span class="line"><span class="built_in">kill</span> -s SIGTERM [nginx master进程pid]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新读取配置文件，会关闭之前的work子进程，生成新的work子进程 </span></span><br><span class="line"><span class="built_in">kill</span> -s SIGHUP [nginx master进程pid]</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.682s0oj5i400.webp"                      width="70%"                ><br/></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4ouapvas0x40.webp"                      width="70%"                ><br/></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.zftbgjpnhzk.webp"                      width="70%"                ><br/></p><br/><h2 id="配置文件重载的原理真相"><a href="#配置文件重载的原理真相" class="headerlink" title="配置文件重载的原理真相"></a>配置文件重载的原理真相</h2><h3 id="reload-重载配置文件的流程"><a href="#reload-重载配置文件的流程" class="headerlink" title="reload 重载配置文件的流程"></a><code>reload</code> 重载配置文件的流程</h3><ol><li>向master进程发送HUP信号（reload命令）</li><li>master进程检查配置语法是否正确</li><li>master进程打开监听端口</li><li>master进程使用新的配置文件启动新的worker子进程</li><li>master进程向老的worker子进程发送QUIT信号</li><li>旧的worker进程关闭监听句柄，处理完当前连接后关闭进程</li></ol><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.7cv9qios6300.webp"                      width="65%"                 ><br/><h2 id="Nginx的热部署"><a href="#Nginx的热部署" class="headerlink" title="Nginx的热部署"></a>Nginx的热部署</h2><h3 id="热升级的流程"><a href="#热升级的流程" class="headerlink" title="热升级的流程"></a>热升级的流程</h3><ol><li>将旧的nginx文件替换成新的nginx文件</li><li>向master进程发送USR2信号</li><li>master进程修改pid文件，加后缀.oldbin</li><li>master进程用新nginx文件启动新master进程</li><li>向旧的master进程发送WINCH信号，旧的worker子进程退出</li><li>回滚槽形：向旧master发送HUP ,向新的master发送QUIT</li></ol><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3s80krndr7m0.webp"                      width="75%"                 ><h3 id="Nginx热部署完整步骤演示"><a href="#Nginx热部署完整步骤演示" class="headerlink" title="Nginx热部署完整步骤演示"></a>Nginx热部署完整步骤演示</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> nginx nginx.bak</span><br><span class="line"><span class="built_in">kill</span> -s SIGUSR2 19932</span><br><span class="line"><span class="built_in">kill</span> -s SIGWINCH 19932</span><br><span class="line"><span class="built_in">kill</span> -s SIGQUIT 19932</span><br><span class="line"><span class="comment"># 让旧master进程 启动work子进程（使用的还是旧的nginx二进制文件）</span></span><br><span class="line"><span class="built_in">kill</span> -s SIGHUP 20650</span><br></pre></td></tr></table></figure><ul><li>注意事项</li></ul><blockquote><p>不能使用 <code>kill -s SIGHU []</code> 退出旧的master进程，如果这样做的话，旧的 master主进程和其子进程会直接退出（被kill掉），这样（当新启的nginx进程有问题时）就无法回滚。</p><p>所以应该使用 <code>kill -s SIGWINCH []</code>，先将旧的master主进程下的work子进程全部kill掉，验证新启的nginx进程没有问题后，再使用 <code>kill -s SIGHU []</code>kill掉旧的master进程。如果验证新启的nginx进程有问题，这时使用 <code>kill -s SIGHUP []</code> 就可以让旧master进程重新启动work子进程。（达到回滚的效果）</p></blockquote><h4 id="正常升级"><a href="#正常升级" class="headerlink" title="正常升级"></a>正常升级</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]<span class="comment"># /opt/nginx/nginx</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ps -ef |grep nginx</span></span><br><span class="line">root      19932      1  0 07:28 ?        00:00:00 nginx: master process /opt/nginx/nginx</span><br><span class="line">nginx     19933  19932  0 07:28 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19934  19932  0 07:28 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19935  19932  0 07:28 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19936  19932  0 07:28 ?        00:00:00 nginx: worker process</span><br><span class="line">root      19938  10122  0 07:28 pts/2    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># cd /opt/nginx/</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ll</span></span><br><span class="line">总用量 1240</span><br><span class="line">-rwxr-xr-x. 1 root root 1266632 10月 19 2021 nginx</span><br><span class="line">[root@localhost nginx]<span class="comment"># cp nginx nginx.bak</span></span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ps -ef |grep nginx</span></span><br><span class="line">root      19932      1  0 07:28 ?        00:00:00 nginx: master process /opt/nginx/nginx</span><br><span class="line">nginx     19933  19932  0 07:28 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19934  19932  0 07:28 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19935  19932  0 07:28 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19936  19932  0 07:28 ?        00:00:00 nginx: worker process</span><br><span class="line">root      19942  10122  0 07:30 pts/2    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@localhost nginx]<span class="comment"># ll</span></span><br><span class="line">总用量 2480</span><br><span class="line">-rwxr-xr-x. 1 root root 1266632 10月 19 2021 nginx</span><br><span class="line">-rwxr-xr-x. 1 root root 1266632 5月  16 07:30 nginx.bak</span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># kill -s SIGUSR2 19932</span></span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ps -ef |grep nginx</span></span><br><span class="line">root      19932      1  0 07:28 ?        00:00:00 nginx: master process /opt/nginx/nginx</span><br><span class="line">nginx     19933  19932  0 07:28 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19934  19932  0 07:28 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19935  19932  0 07:28 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19936  19932  0 07:28 ?        00:00:00 nginx: worker process</span><br><span class="line">root      19944  19932  0 07:31 ?        00:00:00 nginx: master process /opt/nginx/nginx</span><br><span class="line">nginx     19945  19944  0 07:31 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19946  19944  0 07:31 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19947  19944  0 07:31 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19948  19944  0 07:31 ?        00:00:00 nginx: worker process</span><br><span class="line">root      19950  10122  0 07:32 pts/2    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ll /run/</span></span><br><span class="line">总用量 32</span><br><span class="line">-rw-r--r--.  1 root root    4 5月  16 02:49 auditd.pid</span><br><span class="line">drwxr-xr-x.  2 root root   80 5月  16 02:49 blkid</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 console</span><br><span class="line">-rw-r--r--.  1 root root    4 5月  16 02:49 crond.pid</span><br><span class="line">----------.  1 root root    0 5月  16 02:49 cron.reboot</span><br><span class="line">drwx------.  2 root root   40 5月  16 02:49 cryptsetup</span><br><span class="line">drwxr-xr-x.  2 root root   60 5月  16 02:49 dbus</span><br><span class="line">prw-------.  1 root root    0 5月  16 02:49 dmeventd-client</span><br><span class="line">prw-------.  1 root root    0 5月  16 02:49 dmeventd-server</span><br><span class="line">-rw-------.  1 root root    0 5月  16 02:49 ebtables.lock</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 faillock</span><br><span class="line">drwxr-x---.  2 root root   40 5月  16 03:52 firewalld</span><br><span class="line">drwxr-xr-x.  4 root root  120 5月  16 02:49 initramfs</span><br><span class="line">drwxr-xr-x.  5 root root  120 5月  16 03:48 lock</span><br><span class="line">drwxr-xr-x.  3 root root   60 5月  16 02:49 <span class="built_in">log</span></span><br><span class="line">drwx------.  3 root root  100 5月  16 02:49 lvm</span><br><span class="line">-rw-r--r--.  1 root root    4 5月  16 02:49 lvmetad.pid</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 mount</span><br><span class="line">drwxrwxr-x.  2 root root   40 5月  16 02:49 netreport</span><br><span class="line">drwxr-xr-x.  3 root root  120 5月  16 02:59 NetworkManager</span><br><span class="line">-rw-r--r--.  1 root root    6 5月  16 07:31 nginx.pid</span><br><span class="line">-rw-r--r--.  1 root root    6 5月  16 07:28 nginx.pid.oldbin</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 plymouth</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 sepermit</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 setrans</span><br><span class="line">-rw-r--r--.  1 root root    5 5月  16 02:49 sshd.pid</span><br><span class="line">drwx--x--x.  3 root root   60 5月  16 02:49 sudo</span><br><span class="line">-rw-------.  1 root root    4 5月  16 02:49 syslogd.pid</span><br><span class="line">drwxr-xr-x. 19 root root  460 5月  16 03:38 systemd</span><br><span class="line">drwxr-xr-x.  2 root root   60 5月  16 02:49 tmpfiles.d</span><br><span class="line">drwxr-xr-x.  2 root root   60 5月  16 02:49 tuned</span><br><span class="line">drwxr-xr-x.  7 root root  160 5月  16 07:33 udev</span><br><span class="line">drwxr-xr-x.  3 root root   60 5月  16 02:49 user</span><br><span class="line">-rw-rw-r--.  1 root utmp 2304 5月  16 07:32 utmp</span><br><span class="line">-rw-------.  1 root root    0 5月  16 02:49 xtables.lock</span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># cat /run/nginx.pid.oldbin</span></span><br><span class="line">19932</span><br><span class="line">[root@localhost nginx]<span class="comment"># cat /run/nginx.pid</span></span><br><span class="line">19944</span><br><span class="line">[root@localhost nginx]<span class="comment"># kill -s SIGWINCH 19932</span></span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ps -ef |grep nginx</span></span><br><span class="line">root      19932      1  0 07:28 ?        00:00:00 nginx: master process /opt/nginx/nginx</span><br><span class="line">root      19944  19932  0 07:31 ?        00:00:00 nginx: master process /opt/nginx/nginx</span><br><span class="line">nginx     19945  19944  0 07:31 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19946  19944  0 07:31 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19947  19944  0 07:31 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19948  19944  0 07:31 ?        00:00:00 nginx: worker process</span><br><span class="line">root      20115  10122  0 07:36 pts/2    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># kill -s SIGQUIT 19932</span></span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ps -ef |grep nginx</span></span><br><span class="line">root      19944      1  0 07:31 ?        00:00:00 nginx: master process /opt/nginx/nginx</span><br><span class="line">nginx     19945  19944  0 07:31 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19946  19944  0 07:31 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19947  19944  0 07:31 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     19948  19944  0 07:31 ?        00:00:00 nginx: worker process</span><br><span class="line">root      20181  10122  0 07:37 pts/2    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@localhost nginx]<span class="comment"># ll /run/</span></span><br><span class="line">总用量 28</span><br><span class="line">-rw-r--r--.  1 root root    4 5月  16 02:49 auditd.pid</span><br><span class="line">drwxr-xr-x.  2 root root   80 5月  16 02:49 blkid</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 console</span><br><span class="line">-rw-r--r--.  1 root root    4 5月  16 02:49 crond.pid</span><br><span class="line">----------.  1 root root    0 5月  16 02:49 cron.reboot</span><br><span class="line">drwx------.  2 root root   40 5月  16 02:49 cryptsetup</span><br><span class="line">drwxr-xr-x.  2 root root   60 5月  16 02:49 dbus</span><br><span class="line">prw-------.  1 root root    0 5月  16 02:49 dmeventd-client</span><br><span class="line">prw-------.  1 root root    0 5月  16 02:49 dmeventd-server</span><br><span class="line">-rw-------.  1 root root    0 5月  16 02:49 ebtables.lock</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 faillock</span><br><span class="line">drwxr-x---.  2 root root   40 5月  16 03:52 firewalld</span><br><span class="line">drwxr-xr-x.  4 root root  120 5月  16 02:49 initramfs</span><br><span class="line">drwxr-xr-x.  5 root root  120 5月  16 03:48 lock</span><br><span class="line">drwxr-xr-x.  3 root root   60 5月  16 02:49 <span class="built_in">log</span></span><br><span class="line">drwx------.  3 root root  100 5月  16 02:49 lvm</span><br><span class="line">-rw-r--r--.  1 root root    4 5月  16 02:49 lvmetad.pid</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 mount</span><br><span class="line">drwxrwxr-x.  2 root root   40 5月  16 02:49 netreport</span><br><span class="line">drwxr-xr-x.  3 root root  120 5月  16 02:59 NetworkManager</span><br><span class="line">-rw-r--r--.  1 root root    6 5月  16 07:31 nginx.pid</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 plymouth</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 sepermit</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 setrans</span><br><span class="line">-rw-r--r--.  1 root root    5 5月  16 02:49 sshd.pid</span><br><span class="line">drwx--x--x.  3 root root   60 5月  16 02:49 sudo</span><br><span class="line">-rw-------.  1 root root    4 5月  16 02:49 syslogd.pid</span><br><span class="line">drwxr-xr-x. 19 root root  460 5月  16 03:38 systemd</span><br><span class="line">drwxr-xr-x.  2 root root   60 5月  16 02:49 tmpfiles.d</span><br><span class="line">drwxr-xr-x.  2 root root   60 5月  16 02:49 tuned</span><br><span class="line">drwxr-xr-x.  7 root root  160 5月  16 07:33 udev</span><br><span class="line">drwxr-xr-x.  3 root root   60 5月  16 02:49 user</span><br><span class="line">-rw-rw-r--.  1 root utmp 2304 5月  16 07:32 utmp</span><br><span class="line">-rw-------.  1 root root    0 5月  16 02:49 xtables.lock</span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ll</span></span><br><span class="line">总用量 2480</span><br><span class="line">-rwxr-xr-x. 1 root root 1266632 10月 19 2021 nginx</span><br><span class="line">-rwxr-xr-x. 1 root root 1266632 5月  16 07:30 nginx.bak</span><br><span class="line">[root@localhost nginx]<span class="comment"># rm -rf nginx.bak</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ll</span></span><br><span class="line">总用量 1240</span><br><span class="line">-rwxr-xr-x. 1 root root 1266632 10月 19 2021 nginx</span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br></pre></td></tr></table></figure><br/><h4 id="回滚情形"><a href="#回滚情形" class="headerlink" title="回滚情形"></a>回滚情形</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]<span class="comment"># /opt/nginx/nginx</span></span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ps -ef |grep nginx</span></span><br><span class="line">root      20650      1  0 07:46 ?        00:00:00 nginx: master process /opt/nginx/nginx</span><br><span class="line">nginx     20651  20650  0 07:46 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20652  20650  0 07:46 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20653  20650  0 07:46 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20654  20650  0 07:46 ?        00:00:00 nginx: worker process</span><br><span class="line">root      20670  10122  0 07:46 pts/2    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@localhost nginx]<span class="comment"># cd /opt/nginx/</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ll</span></span><br><span class="line">总用量 1240</span><br><span class="line">-rwxr-xr-x. 1 root root 1266632 5月  16 07:44 nginx</span><br><span class="line">[root@localhost nginx]<span class="comment"># cp nginx nginx.bak</span></span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># kill -s SIGUSR2 20650</span></span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ps -ef |grep nginx</span></span><br><span class="line">root      20650      1  0 07:46 ?        00:00:00 nginx: master process /opt/nginx/nginx</span><br><span class="line">nginx     20651  20650  0 07:46 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20652  20650  0 07:46 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20653  20650  0 07:46 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20654  20650  0 07:46 ?        00:00:00 nginx: worker process</span><br><span class="line">root      20698  20650  0 07:47 ?        00:00:00 nginx: master process /opt/nginx/nginx</span><br><span class="line">nginx     20699  20698  0 07:47 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20700  20698  0 07:47 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20701  20698  0 07:47 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20702  20698  0 07:47 ?        00:00:00 nginx: worker process</span><br><span class="line">root      20711  10122  0 07:47 pts/2    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@localhost nginx]<span class="comment"># ll</span></span><br><span class="line">总用量 2480</span><br><span class="line">-rwxr-xr-x. 1 root root 1266632 5月  16 07:44 nginx</span><br><span class="line">-rwxr-xr-x. 1 root root 1266632 5月  16 07:46 nginx.bak</span><br><span class="line">[root@localhost nginx]<span class="comment"># ll /run/</span></span><br><span class="line">总用量 32</span><br><span class="line">-rw-r--r--.  1 root root    4 5月  16 02:49 auditd.pid</span><br><span class="line">drwxr-xr-x.  2 root root   80 5月  16 02:49 blkid</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 console</span><br><span class="line">-rw-r--r--.  1 root root    4 5月  16 02:49 crond.pid</span><br><span class="line">----------.  1 root root    0 5月  16 02:49 cron.reboot</span><br><span class="line">drwx------.  2 root root   40 5月  16 02:49 cryptsetup</span><br><span class="line">drwxr-xr-x.  2 root root   60 5月  16 02:49 dbus</span><br><span class="line">prw-------.  1 root root    0 5月  16 02:49 dmeventd-client</span><br><span class="line">prw-------.  1 root root    0 5月  16 02:49 dmeventd-server</span><br><span class="line">-rw-------.  1 root root    0 5月  16 02:49 ebtables.lock</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 faillock</span><br><span class="line">drwxr-x---.  2 root root   40 5月  16 03:52 firewalld</span><br><span class="line">drwxr-xr-x.  4 root root  120 5月  16 02:49 initramfs</span><br><span class="line">drwxr-xr-x.  5 root root  120 5月  16 03:48 lock</span><br><span class="line">drwxr-xr-x.  3 root root   60 5月  16 02:49 <span class="built_in">log</span></span><br><span class="line">drwx------.  3 root root  100 5月  16 02:49 lvm</span><br><span class="line">-rw-r--r--.  1 root root    4 5月  16 02:49 lvmetad.pid</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 mount</span><br><span class="line">drwxrwxr-x.  2 root root   40 5月  16 02:49 netreport</span><br><span class="line">drwxr-xr-x.  3 root root  120 5月  16 02:59 NetworkManager</span><br><span class="line">-rw-r--r--.  1 root root    6 5月  16 07:47 nginx.pid</span><br><span class="line">-rw-r--r--.  1 root root    6 5月  16 07:46 nginx.pid.oldbin</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 plymouth</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 sepermit</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 setrans</span><br><span class="line">-rw-r--r--.  1 root root    5 5月  16 02:49 sshd.pid</span><br><span class="line">drwx--x--x.  3 root root   60 5月  16 02:49 sudo</span><br><span class="line">-rw-------.  1 root root    4 5月  16 02:49 syslogd.pid</span><br><span class="line">drwxr-xr-x. 19 root root  460 5月  16 03:38 systemd</span><br><span class="line">drwxr-xr-x.  2 root root   60 5月  16 02:49 tmpfiles.d</span><br><span class="line">drwxr-xr-x.  2 root root   60 5月  16 02:49 tuned</span><br><span class="line">drwxr-xr-x.  7 root root  160 5月  16 07:33 udev</span><br><span class="line">drwxr-xr-x.  3 root root   60 5月  16 02:49 user</span><br><span class="line">-rw-rw-r--.  1 root utmp 2304 5月  16 07:32 utmp</span><br><span class="line">-rw-------.  1 root root    0 5月  16 02:49 xtables.lock</span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># kill -s SIGWINCH 20650</span></span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ps -ef |grep nginx</span></span><br><span class="line">root      20650      1  0 07:46 ?        00:00:00 nginx: master process /opt/nginx/nginx</span><br><span class="line">root      20698  20650  0 07:47 ?        00:00:00 nginx: master process /opt/nginx/nginx</span><br><span class="line">nginx     20699  20698  0 07:47 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20700  20698  0 07:47 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20701  20698  0 07:47 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20702  20698  0 07:47 ?        00:00:00 nginx: worker process</span><br><span class="line">root      20780  10122  0 07:48 pts/2    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># kill -s SIGHUP 20650</span></span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ps -ef |grep nginx</span></span><br><span class="line">root      20650      1  0 07:46 ?        00:00:00 nginx: master process /opt/nginx/nginx</span><br><span class="line">root      20698  20650  0 07:47 ?        00:00:00 nginx: master process /opt/nginx/nginx</span><br><span class="line">nginx     20699  20698  0 07:47 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20700  20698  0 07:47 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20701  20698  0 07:47 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20702  20698  0 07:47 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20815  20650  0 07:49 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20816  20650  0 07:49 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20817  20650  0 07:49 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20818  20650  0 07:49 ?        00:00:00 nginx: worker process</span><br><span class="line">root      20825  10122  0 07:49 pts/2    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># kill -s SIGQUIT 20698</span></span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ps -ef |grep nginx</span></span><br><span class="line">root      20650      1  0 07:46 ?        00:00:00 nginx: master process /opt/nginx/nginx</span><br><span class="line">nginx     20815  20650  0 07:49 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20816  20650  0 07:49 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20817  20650  0 07:49 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     20818  20650  0 07:49 ?        00:00:00 nginx: worker process</span><br><span class="line">root      20935  10122  0 07:51 pts/2    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># cat /run/nginx.pid</span></span><br><span class="line">20650</span><br><span class="line">[root@localhost nginx]<span class="comment"># ll /run/</span></span><br><span class="line">总用量 28</span><br><span class="line">-rw-r--r--.  1 root root    4 5月  16 02:49 auditd.pid</span><br><span class="line">drwxr-xr-x.  2 root root   80 5月  16 02:49 blkid</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 console</span><br><span class="line">-rw-r--r--.  1 root root    4 5月  16 02:49 crond.pid</span><br><span class="line">----------.  1 root root    0 5月  16 02:49 cron.reboot</span><br><span class="line">drwx------.  2 root root   40 5月  16 02:49 cryptsetup</span><br><span class="line">drwxr-xr-x.  2 root root   60 5月  16 02:49 dbus</span><br><span class="line">prw-------.  1 root root    0 5月  16 02:49 dmeventd-client</span><br><span class="line">prw-------.  1 root root    0 5月  16 02:49 dmeventd-server</span><br><span class="line">-rw-------.  1 root root    0 5月  16 02:49 ebtables.lock</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 faillock</span><br><span class="line">drwxr-x---.  2 root root   40 5月  16 03:52 firewalld</span><br><span class="line">drwxr-xr-x.  4 root root  120 5月  16 02:49 initramfs</span><br><span class="line">drwxr-xr-x.  5 root root  120 5月  16 03:48 lock</span><br><span class="line">drwxr-xr-x.  3 root root   60 5月  16 02:49 <span class="built_in">log</span></span><br><span class="line">drwx------.  3 root root  100 5月  16 02:49 lvm</span><br><span class="line">-rw-r--r--.  1 root root    4 5月  16 02:49 lvmetad.pid</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 mount</span><br><span class="line">drwxrwxr-x.  2 root root   40 5月  16 02:49 netreport</span><br><span class="line">drwxr-xr-x.  3 root root  120 5月  16 02:59 NetworkManager</span><br><span class="line">-rw-r--r--.  1 root root    6 5月  16 07:46 nginx.pid</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 plymouth</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 sepermit</span><br><span class="line">drwxr-xr-x.  2 root root   40 5月  16 02:49 setrans</span><br><span class="line">-rw-r--r--.  1 root root    5 5月  16 02:49 sshd.pid</span><br><span class="line">drwx--x--x.  3 root root   60 5月  16 02:49 sudo</span><br><span class="line">-rw-------.  1 root root    4 5月  16 02:49 syslogd.pid</span><br><span class="line">drwxr-xr-x. 19 root root  460 5月  16 03:38 systemd</span><br><span class="line">drwxr-xr-x.  2 root root   60 5月  16 02:49 tmpfiles.d</span><br><span class="line">drwxr-xr-x.  2 root root   60 5月  16 02:49 tuned</span><br><span class="line">drwxr-xr-x.  7 root root  160 5月  16 07:33 udev</span><br><span class="line">drwxr-xr-x.  3 root root   60 5月  16 02:49 user</span><br><span class="line">-rw-rw-r--.  1 root utmp 2304 5月  16 07:32 utmp</span><br><span class="line">-rw-------.  1 root root    0 5月  16 02:49 xtables.lock</span><br><span class="line">[root@localhost nginx]<span class="comment"># ll</span></span><br><span class="line">总用量 2480</span><br><span class="line">-rwxr-xr-x. 1 root root 1266632 5月  16 07:44 nginx</span><br><span class="line">-rwxr-xr-x. 1 root root 1266632 5月  16 07:46 nginx.bak</span><br><span class="line">[root@localhost nginx]<span class="comment"># rm -rf nginx</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># mv nginx.bak nginx</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ll</span></span><br><span class="line">总用量 1240</span><br><span class="line">-rwxr-xr-x. 1 root root 1266632 5月  16 07:46 nginx</span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="Nginx模块化设计机制"><a href="#Nginx模块化设计机制" class="headerlink" title="Nginx模块化设计机制"></a>Nginx模块化设计机制</h2><h3 id="模块结构图"><a href="#模块结构图" class="headerlink" title="模块结构图"></a>模块结构图</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5piekf14yes0.webp"                      width="60%"                 ><br/><h3 id="模块体系结构"><a href="#模块体系结构" class="headerlink" title="模块体系结构"></a>模块体系结构</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2miqh0m6jdo0.webp"                      width="50%"                 ><br/><h2 id="Nginx编译安装的配置参数"><a href="#Nginx编译安装的配置参数" class="headerlink" title="Nginx编译安装的配置参数"></a>Nginx编译安装的配置参数</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.7jfdxqlxm340.webp"                      width="70%"                ><h2 id="定制编译安装Nginx"><a href="#定制编译安装Nginx" class="headerlink" title="定制编译安装Nginx"></a>定制编译安装Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备安装文件</span></span><br><span class="line">[root@localhost tar-gz]<span class="comment"># ll</span></span><br><span class="line">总用量 3648</span><br><span class="line">-rw-r--r--. 1 root root 1032630 8月  14 2019 nginx-1.16.1.tar.gz</span><br><span class="line">-rw-r--r--. 1 root root 2085854 6月  12 05:09 pcre-8.43.tar.gz</span><br><span class="line">-rw-r--r--. 1 root root  607698 1月  16 2017 zlib-1.2.11.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全部解压</span></span><br><span class="line">[root@localhost install]<span class="comment"># ll</span></span><br><span class="line">drwxr-xr-x.  8 1001  1001  158 8月  13 2019 nginx-1.16.1</span><br><span class="line">drwxr-xr-x.  7 1169  1169 8192 2月  24 2019 pcre-8.43</span><br><span class="line">drwxr-xr-x. 14  501 games 4096 1月  16 2017 zlib-1.2.11</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压后进入 nginx源码目录，查看相关编译参数</span></span><br><span class="line">[root@localhost nginx-1.16.1]<span class="comment"># ./configure --help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装前下载相关依赖</span></span><br><span class="line">[root@localhost nginx-1.16.1]<span class="comment"># yum install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel gd gd-devel</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost nginx-1.16.1]<span class="comment"># ./configure --prefix=/usr/local/nginx --conf-path=/usr/local/nginx/conf/nginx.conf --user=nginx --group=nginx --pid-path=/usr/local/nginx/pid/nginx.pid --error-log-path=/usr/local/nginx/logs/error.log --with-pcre=/install/pcre-8.43 --with-zlib=/install/zlib-1.2.11 --with-http_ssl_module --with-http_image_filter_module --with-http_stub_status_module --http-log-path=/usr/local/nginx/logs/access.log</span></span><br><span class="line"></span><br><span class="line">[root@localhost nginx-1.16.1]<span class="comment"># make</span></span><br><span class="line"></span><br><span class="line">[root@localhost nginx-1.16.1]<span class="comment"># make install</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost nginx-1.16.1]<span class="comment"># cd /usr/local/nginx/</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ll</span></span><br><span class="line">总用量 4</span><br><span class="line">drwxr-xr-x. 2 root root 4096 6月  12 05:43 conf</span><br><span class="line">drwxr-xr-x. 2 root root   40 6月  12 05:43 html</span><br><span class="line">drwxr-xr-x. 2 root root    6 6月  12 05:43 logs</span><br><span class="line">drwxr-xr-x. 2 root root    6 6月  12 05:43 pid</span><br><span class="line">drwxr-xr-x. 2 root root   19 6月  12 05:43 sbin</span><br><span class="line"></span><br><span class="line">[root@localhost sbin]<span class="comment"># useradd nginx</span></span><br><span class="line"></span><br><span class="line">[root@localhost nginx]<span class="comment"># pwd</span></span><br><span class="line">/usr/local/nginx</span><br><span class="line">[root@localhost nginx]<span class="comment">#</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># sbin/nginx</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># ps -ef | grep nginx</span></span><br><span class="line">root      12464      1  0 05:48 ?        00:00:00 nginx: master process sbin/nginx</span><br><span class="line">nginx     12465  12464  0 05:48 ?        00:00:00 nginx: worker process</span><br><span class="line">root      12473   1840  0 05:48 pts/1    00:00:00 </span><br></pre></td></tr></table></figure><h2 id="Nginx配置文件结构"><a href="#Nginx配置文件结构" class="headerlink" title="Nginx配置文件结构"></a>Nginx配置文件结构</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.69cd7t6e47k0.webp"                      width="65%"                ><h2 id="虚拟主机的分类（三种）"><a href="#虚拟主机的分类（三种）" class="headerlink" title="虚拟主机的分类（三种）"></a>虚拟主机的分类（三种）</h2><ul><li>基于多IP的虚拟主机</li><li>基于多端口的虚拟主机</li><li>基于域名的虚拟主机</li></ul><h1 id="核心指令-Nginx基础应用"><a href="#核心指令-Nginx基础应用" class="headerlink" title="核心指令-Nginx基础应用"></a>核心指令-Nginx基础应用</h1><h2 id="配置文件main段核心参数用法"><a href="#配置文件main段核心参数用法" class="headerlink" title="配置文件main段核心参数用法"></a>配置文件main段核心参数用法</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main段核心参数:</span></span><br><span class="line"><span class="attribute">user</span> USERNAME [GROUP]</span><br><span class="line">    解释：指定运行nginx的worker子进程的属主和属组，其中属组可以不指定 </span><br><span class="line">示例：</span><br><span class="line">user nginx nginx;</span><br><span class="line"></span><br><span class="line"><span class="attribute">pid</span> DIR</span><br><span class="line">    解释：指定运行nginx的mas ter主进程的pid文件存放路径 </span><br><span class="line">示例：</span><br><span class="line">pid /ropt/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> number</span><br><span class="line">   解春：指定worker子进程可以打开的最大文件句柄数 </span><br><span class="line">示例：</span><br><span class="line">         worker_rlimit_nofile <span class="number">20480</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">worker_rlimit_core</span> size</span><br><span class="line"> 一 解释：指定worker子进程异常终止后的core文件，用于记录分析问题 </span><br><span class="line">示例：</span><br><span class="line">         worker_rlimit_core <span class="number">50M</span>；</span><br><span class="line">         working_directory /opt/nginx/tmp;</span><br><span class="line"></span><br><span class="line"><span class="attribute">worker_processes</span> number | auto</span><br><span class="line">   解释：指定nginx启动的worker子进程数量</span><br><span class="line">   示例：</span><br><span class="line">         worker_processes <span class="number">4</span>;</span><br><span class="line">         <span class="attribute">worker_processes</span> auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> cpumaskl cpumask2...</span><br><span class="line">   解霹：将每个worker子进程与我们的CPU物理核心绑定。</span><br><span class="line">   示例：</span><br><span class="line">         worker_cpu_affinity <span class="number">0001</span> <span class="number">0010</span> <span class="number">0100</span> <span class="number">1000</span>； <span class="comment">#</span></span><br><span class="line">         <span class="number">4</span>个物理核心，<span class="number">4</span>个worker子进程</span><br><span class="line">         worker_cpu_affinity <span class="number">00000001</span> <span class="number">00000010</span> <span class="number">00000100</span> <span class="number">00001000</span> <span class="number">00010000</span></span><br><span class="line">         <span class="number">00100060</span> <span class="number">01000000</span> <span class="number">10000000</span>; <span class="comment"># 8物理核心，8个worker子进程</span></span><br><span class="line">         <span class="attribute">worker_cpu_affinity</span> <span class="number">01</span> <span class="number">10</span> <span class="number">01</span> <span class="number">10</span>;         <span class="comment"># 2个物理核心，4个子进程</span></span><br><span class="line">  备注：将每个worker子进程与特定CPU物理核心绑定，优势在于：避免同个worker子进程</span><br><span class="line">  在不同的CPU核心上切换，缓存失效，降低性能；其并不能真正的避免进程切换</span><br><span class="line"></span><br><span class="line"><span class="attribute">worker_priority</span> number</span><br><span class="line">   解释：指定worker子进程的nice值，以调整运行nginx的优先级，通常设定为负值，以优先 调用nginx</span><br><span class="line">   示例：</span><br><span class="line">        worker_priority -<span class="number">10</span>;</span><br><span class="line">   备注：Linux默认进程的优先级值是120,值越小越优先；nice设定范围为-20到+19</span><br><span class="line"></span><br><span class="line"><span class="attribute">worker_shutdown_timeout</span> time</span><br><span class="line">   解春：指定证rker子进程优雅退出时的超时时间</span><br><span class="line">   示例：</span><br><span class="line">        worker_shutdown_timeout <span class="number">5s</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">timer_resolution</span> time</span><br><span class="line">   解释：worker子进程内部使用的计时器精度，调整时间间隔越大，系统调用越少，有利于性 能提升；反之，系统调用越多，性能下降</span><br><span class="line">   示例：</span><br><span class="line">        worker_resolution 100ms;</span><br><span class="line"></span><br><span class="line"><span class="attribute">daemon</span> <span class="literal">on</span>|<span class="literal">off</span></span><br><span class="line">  解释：设定nginx的运行方式，前台还是后台，前台用户调试，后台用于生产 示例：</span><br><span class="line">       daemon <span class="literal">off</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置文件events段核心参数用法"><a href="#配置文件events段核心参数用法" class="headerlink" title="配置文件events段核心参数用法"></a>配置文件events段核心参数用法</h2><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">use</td><td align="center">nginx使用何种事件驱动模型</td></tr><tr><td align="center">worker_connections</td><td align="center">worker子进程能够处理的最大并发连接数</td></tr><tr><td align="center">accept_mutex</td><td align="center">是否打开负载均衡互斥锁</td></tr><tr><td align="center">accept_mutex_delay</td><td align="center">新连接分配给worker子进程的超时时间</td></tr><tr><td align="center">lock_file</td><td align="center">负载均衡互斥锁文件存放路径</td></tr><tr><td align="center">muti_accept</td><td align="center">worker子进程可以接收的新连接个数</td></tr></tbody></table><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><ul><li>linux信号量这块的管理机制可以再抽时间深入理解一下</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nginx初体验&quot;&gt;&lt;a href=&quot;#Nginx初体验&quot; class=&quot;headerlink&quot; title=&quot;Nginx初体验&quot;&gt;&lt;/a&gt;Nginx初体验&lt;/h1&gt;&lt;h2 id=&quot;安装第一个rpm包Nginx&quot;&gt;&lt;a href=&quot;#安装第一个rpm包Nginx&quot;</summary>
      
    
    
    
    <category term="nginx" scheme="https://sonzonzy.github.io/categories/nginx/"/>
    
    
    <category term="nginx" scheme="https://sonzonzy.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>kingbase</title>
    <link href="https://sonzonzy.github.io/kingbase/"/>
    <id>https://sonzonzy.github.io/kingbase/</id>
    <published>2022-05-16T18:51:05.000Z</published>
    <updated>2022-05-16T18:51:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kingbase-安装与启停"><a href="#Kingbase-安装与启停" class="headerlink" title="Kingbase 安装与启停"></a>Kingbase 安装与启停</h1><h2 id="安装前准备工作"><a href="#安装前准备工作" class="headerlink" title="安装前准备工作"></a>安装前准备工作</h2><ul><li><p>服务器安装jdk1.8+版本并配置环境变量</p></li><li><p>创建kingbase用户组与用户。创建目录，并设置目录属组、属组、权限</p></li><li><p>上传kingbase安装包和kingbase的license.dat 到服务器（安装包和license可以到<a class="link"   href="https://www.kingbase.com.cn/rjcxxz/index.htm" >官网<i class="fas fa-external-link-alt"></i></a>下载） </p><br/></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为了利于数据库的日常运维、持续使用、存储扩容等，我们在安装前需做好选项、存储目录规划</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户登录进服务器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/install 安装软件上传目录  /kingbase/V8  数据库安装目录  /backup 备份目录  /data 数据存储目录  /archive 归档目录</span></span><br><span class="line">mkdir -p /install /KingbaseES/V8 /backup /data /archive</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传 安装包、license.dat 到 /install 目录</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">optimize_system_conf_kcp.sh 优化操作系统的脚本   optimize_database_conf.sh 优化数据库的脚本</span> </span><br><span class="line"></span><br><span class="line">[root@node1 install]# ll /install</span><br><span class="line">总用量 852348</span><br><span class="line">-rw-r--r--. 1 root root 872781824 5月  11 03:27 KingbaseES_V008R006C005B0023_Lin                                      64_single_install.iso</span><br><span class="line">-rw-r--r--. 1 root root      3351 5月  11 03:27 license_12350_0.dat</span><br><span class="line">-rw-r--r--. 1 root root      6504 5月  11 03:27 optimize_database_conf.sh</span><br><span class="line">-rw-r--r--. 1 root root      8023 5月  11 03:27 optimize_system_conf_kcp.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行 优化操作系统的脚本。主要帮我们 创建了kingbase 用户组和用户（用户密码：kingbase）。具体详情可以查看脚本内容</span></span><br><span class="line">bash /install/optimize_system_conf_kcp.sh</span><br><span class="line"></span><br><span class="line">[root@node1 install]# id kingbase</span><br><span class="line">uid=1001(kingbase) gid=1001(kingbase) 组=1001(kingbase)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改目录属组、属主、权限</span></span><br><span class="line">chown -R kingbase:kingbase /install /KingbaseES /backup /archive /data</span><br><span class="line">chmod -R 775 /install /KingbaseES /backup /archive</span><br><span class="line">chmod -R 700 /data</span><br></pre></td></tr></table></figure> <br/><h2 id="Kingbase-安装"><a href="#Kingbase-安装" class="headerlink" title="Kingbase 安装"></a>Kingbase 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们使用的是 KingbaseES_V008R006C005B0023_Lin64_single_install.iso 文件，所以先使用root用户登录并挂载</span></span><br><span class="line">[root@node1 install]# mount -o loop /install/KingbaseES_V008R006C005B0023_Lin64_single_install.iso  /mnt/</span><br><span class="line"></span><br><span class="line">[root@node1 install]# ll /mnt/</span><br><span class="line">总用量 6</span><br><span class="line">dr-xr-xr-x. 2 root root 2048 11月  5 2021 setup</span><br><span class="line">-r-xr-xr-x. 1 root root 3820 11月  5 2021 setup.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 使用kingbase 用户登录服务器 ，进入/mnt 下执行 setup.sh 则开始安装 （</span></span><br><span class="line">[kingbase@node1 mnt]$ <span class="built_in">cd</span> /mnt</span><br><span class="line">[kingbase@node1 mnt]$ bash setup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用命令行安装</span></span><br><span class="line">./setup.sh -i console</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装完成后 使用root用户登录进服务器，把数据库服务注册成系统服务。并启动数据库</span></span><br><span class="line">[root@node1 ~]<span class="comment"># /KingbaseES/V8/Scripts/root.sh</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把kingbase注册成系统服务后（root用户执行 /KingbaseES/V8/Scripts/root.sh 后）。kingbase已经启动了，但此时 为什么不可以使用 systemctl  这种方式启停 kingbase？</span></span><br><span class="line"><span class="comment"># 必须 使用sys_ctl 数据库先停止. 然后再使用systemctl 启动数据. 才能成功启动, 因为systemctl 需要获取进程状态信息.</span></span><br></pre></td></tr></table></figure><ul><li>运行 数据库优化文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash /install/optimize_database_conf.sh</span><br></pre></td></tr></table></figure><br/><h2 id="Kingbase-相关环境变量配置"><a href="#Kingbase-相关环境变量配置" class="headerlink" title="Kingbase 相关环境变量配置"></a>Kingbase 相关环境变量配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用kingbase用户登录。配置ksql环境变量</span></span><br><span class="line"></span><br><span class="line">[root@sonronzy ~]<span class="comment"># su - kingbase</span></span><br><span class="line">[kingbase@sonronzy ~]$ <span class="built_in">cd</span> ~</span><br><span class="line">[kingbase@sonronzy ~]$ vi .bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=/KingbaseES/V8/Server/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">[kingbase@sonronzy ~]$ <span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 使用kingbase用户登录 ，使用sys_ctl 专用命令管理金仓数据库</span><br><span class="line"># 配置sys_ctl 环境变量</span><br><span class="line">[kingbase<span class="variable">@sonronzy</span> <span class="operator">~</span>]$ cd <span class="operator">~</span></span><br><span class="line">[kingbase<span class="variable">@sonronzy</span> <span class="operator">~</span>]$ vim .bashrc</span><br><span class="line"></span><br><span class="line">export PATH</span><br><span class="line">export KINGBASE_DATA<span class="operator">=</span><span class="operator">/</span>data</span><br><span class="line">export PATH<span class="operator">=</span><span class="operator">/</span>KingbaseES<span class="operator">/</span>V8<span class="operator">/</span>Server<span class="operator">/</span>bin:$PATH</span><br><span class="line"></span><br><span class="line">[kingbase<span class="variable">@sonronzy</span> <span class="operator">~</span>]$ source .bashrc</span><br></pre></td></tr></table></figure><br/><h2 id="Kingbase-启停"><a href="#Kingbase-启停" class="headerlink" title="Kingbase 启停"></a>Kingbase 启停</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kingbase 是进程，kingbase8d 是服务</span></span><br><span class="line"><span class="comment"># 注意没有修改linux参数的时候 systemctl 和 service 方式启停数据库 不要混用</span></span><br><span class="line"></span><br><span class="line">service kingbase8d start/stop/restart/status</span><br><span class="line">service kingbase8 start/stop/restart/status</span><br><span class="line"></span><br><span class="line">systemctl start kingbase8d</span><br><span class="line"></span><br><span class="line">/etc/init.d/kingbase8d start</span><br><span class="line"></span><br><span class="line"><span class="comment"># kingbase用户 ，使用sys_ctl 专用命令管理金仓数据库</span></span><br><span class="line"><span class="comment"># 首先要配置 环境变量</span></span><br><span class="line"></span><br><span class="line">sys_ctl start/stop/restart/status</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有任何用户连接到数据库里来，都无法关闭数据库，必须等所有用户提交完数据断开连接后 才可关闭数据库。这个可能会关闭很长时间</span></span><br><span class="line">sys_ctl stop -m smart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认方式 关闭数据库。最好选用这个。 已经提交的用户踢开连接，未提交的用户 回滚，然后关闭数据库（一致状态，安全关闭方式）</span></span><br><span class="line">sys_ctl stop -m fast | sys_ctl stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 断电式关闭数据库 (不推荐，可能会导致数据不一致，数据库无法启动)</span></span><br><span class="line">sys_ctl -m immediate</span><br></pre></td></tr></table></figure><br/><h2 id="Kingbase-卸载"><a href="#Kingbase-卸载" class="headerlink" title="Kingbase 卸载"></a>Kingbase 卸载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用root用户登录，进入到数据库的安装目录下的 Scripts 目录下，执行 rootuninstall.sh 卸载kingbase数据库</span></span><br><span class="line"><span class="built_in">cd</span> /KingbaseES/V8/Scripts</span><br><span class="line"></span><br><span class="line">/KingbaseES/V8/Scripts/rootuninstall.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后确认已删除的kingbase8d 服务</span></span><br></pre></td></tr></table></figure><br/><h2 id="实践环境中常见的问题"><a href="#实践环境中常见的问题" class="headerlink" title="实践环境中常见的问题"></a>实践环境中常见的问题</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/0097e80f862e58ac1ee42674eb5f03e.5mzf9cefwgc0.webp"                       width="80%"                ><br/><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="* 注意事项"></a>* 注意事项</h2><h3 id="Kingbase数据库大小写敏感说明及转换"><a href="#Kingbase数据库大小写敏感说明及转换" class="headerlink" title="Kingbase数据库大小写敏感说明及转换"></a>Kingbase数据库大小写敏感说明及转换</h3><p><a href="https://bbs.kingbase.com.cn/wenda/question/137.html"><font color="red">Kingbase数据库大小写敏感说明及转换</font></a></p><br/><h1 id="Kingbase-客户端"><a href="#Kingbase-客户端" class="headerlink" title="Kingbase 客户端"></a>Kingbase 客户端</h1><h2 id="Kingbase-对象管理器"><a href="#Kingbase-对象管理器" class="headerlink" title="Kingbase 对象管理器"></a>Kingbase 对象管理器</h2><ul><li>我们安装kingbase的时候，如果选择完全安装，则会帮我们安装上 数据库对象管理工具</li><li>使用Kingbase 对象管理器连接数据库 操作如下图</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.6gb216h4y0g0.webp"                       width="90%"                ><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><ul><li>业务软件所使用的对象的集合。包括：表、视图、序列、索引、函数、存储过程等……</li><li>非模式对象：表空间</li></ul><br/><h2 id="其它客户端"><a href="#其它客户端" class="headerlink" title="其它客户端"></a>其它客户端</h2><ul><li>当我们不想在本机安装kingbase数据库时，可以选择第三方数据库客户端连接kingbase数据库。可以使用的相关客户端有：DBeaver、DataGrip 2020.1 x64、Dbvisualizer</li></ul><br/><h3 id="DBeaver"><a href="#DBeaver" class="headerlink" title="DBeaver"></a>DBeaver</h3><ul><li><a class="link"   href="https://dbeaver.io/download/" >官网<i class="fas fa-external-link-alt"></i></a> 下载 DBeaver</li><li>使用DBeaver 连接Kingbase 数据库 操作如下图</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.5o8iqfctzac0.webp"                                       ><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4z57m966ojc0.webp"                                      ><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.7essaooqm480.webp"                                      > <br/><h1 id="ksql-命令行工具"><a href="#ksql-命令行工具" class="headerlink" title="ksql 命令行工具"></a>ksql 命令行工具</h1><ul><li>Ksql是Kingbase的交互式终端</li><li>支持上下键翻页，tab键补全</li></ul><br/><h2 id="ksql登录-、执行sql语句、sql脚本"><a href="#ksql登录-、执行sql语句、sql脚本" class="headerlink" title="ksql登录 、执行sql语句、sql脚本"></a>ksql登录 、执行sql语句、sql脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ksql -Usystem -h localhost -p54321 -W TEST</span><br><span class="line"></span><br><span class="line">ksql -Usystem -W xjnxdb -l</span><br><span class="line"></span><br><span class="line">ksql -Usystem -W xjnxdb -c  <span class="string">&quot;select * from xjnxdb.pa_user&quot;</span></span><br><span class="line"></span><br><span class="line">ksql -Usystem -W xjnxdb -f /home/kingbase/1.sql</span><br></pre></td></tr></table></figure><br/><h2 id="ksql终端常用快捷键"><a href="#ksql终端常用快捷键" class="headerlink" title="ksql终端常用快捷键"></a>ksql终端常用快捷键</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有快捷键</span></span><br><span class="line">\?</span><br><span class="line"></span><br><span class="line"><span class="comment"># help</span></span><br><span class="line">\h create</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前有哪些数据库</span></span><br><span class="line">\l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看表结构</span></span><br><span class="line">\d xjxndb.pa_user</span><br><span class="line"></span><br><span class="line">\c 切换数据库</span><br><span class="line">23:17:59 (system@[<span class="built_in">local</span>]:54321)TEST=<span class="comment"># \c template1</span></span><br><span class="line">口令：</span><br><span class="line">您现在已经连接到数据库 <span class="string">&quot;template1&quot;</span>,用户 <span class="string">&quot;system&quot;</span>.</span><br><span class="line">23:18:09 (system@[<span class="built_in">local</span>]:54321)template1=<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出ksql终端</span></span><br><span class="line">\q</span><br></pre></td></tr></table></figure><br/><h2 id="自定义sql提示符"><a href="#自定义sql提示符" class="headerlink" title="自定义sql提示符"></a>自定义sql提示符</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定制sql提示符，便于我们了解 目前在哪台终端、哪个用户、哪个数据库下操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用kingbase用户登录</span></span><br><span class="line"></span><br><span class="line">[kingbase@sonronzy ~]$ vim ~/.ksqlrc</span><br><span class="line">[kingbase@sonronzy ~]$</span><br><span class="line">[kingbase@sonronzy ~]$ <span class="built_in">cat</span> ~/.ksqlrc</span><br><span class="line">\<span class="built_in">set</span> PROMPT1 <span class="string">&#x27;%`date +%H:%M:%S` (%n@%M:%&gt;)%/%R%#%x &#x27;</span></span><br><span class="line">\<span class="built_in">set</span> PROMPT2 <span class="string">&#x27;%M %n@%/%R%# &#x27;</span></span><br><span class="line">[kingbase@sonronzy ~]$</span><br><span class="line">[kingbase@sonronzy ~]$ <span class="built_in">source</span> ~/.ksqlrc</span><br><span class="line">[kingbase@sonronzy ~]$</span><br><span class="line">[kingbase@sonronzy ~]$ ksql -Usystem -W TEST</span><br><span class="line">口令：</span><br><span class="line">ksql (V8.0)</span><br><span class="line">输入 <span class="string">&quot;help&quot;</span> 来获取帮助信息.</span><br><span class="line"></span><br><span class="line">23:13:03 (system@[<span class="built_in">local</span>]:54321)TEST=<span class="comment">#</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\<span class="built_in">set</span> PROMPT1 <span class="string">&#x27;%`date +%H:%M:%S` (%n@%M:%&gt;)%/%R%#%x &#x27;</span></span><br><span class="line">\<span class="built_in">set</span> PROMPT2 <span class="string">&#x27;%M %n@%/%R%# &#x27;</span></span><br></pre></td></tr></table></figure><p>解析：<br>◆ %M  指数据库服务器的主机名 - 如果连接是通过 Unix 域套接字，则为“[local]”<br>◆ %m  也表示数据库主机名，会截断第一个 . 后的内容<br>◆ %&gt;数据库端口号<br>◆ %n是指会话用户名<br>◆ %&#x2F;当前数据库名<br>◆ %#如果是超级用户显示为 #，否则显示为 &gt;<br>◆ %R是指您处于单行模式（^）还是断开连接（！ ） ，但通常为&#x3D;<br>◆ %x指的是事务状态 - 通常为空白，除非在事务块（*）</p><br/><h2 id="常用sql"><a href="#常用sql" class="headerlink" title="常用sql"></a>常用sql</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> database_mode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> shared_buffers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> get_license_validdays();</span><br></pre></td></tr></table></figure><h2 id="copy-与-copy"><a href="#copy-与-copy" class="headerlink" title="copy 与 \copy"></a>copy 与 \copy</h2><ul><li>copy 命令属于 SQL 命令， \copy 命令属于元命令</li><li>copy 命令进行数据导出、导入时，需要具有 superuser 的权限；导出至 stdout 时，仅需模式、<br>对象的相关权限即可；\copy 命令进行数据导出、导入时，无需 superuser 权限</li><li>copy 命令只能在源数据库服务器上进行数据导出、导入；\copy 命令还可以通过远程服务器连<br>接至源数据库服务器，将数据导出至远程服务器、或将远程服务器的数据导入源数据库中</li><li>大数据量的数据进行导出、导入时，copy 比\copy 的性能高</li><li>如果进行小数据量导出、导入，建议通过\copy 操作便利；大数据量操作时，建议在源数据库中<br>使用 copy 效率更高</li></ul><br/><h1 id="Kingbase-数据迁移"><a href="#Kingbase-数据迁移" class="headerlink" title="Kingbase 数据迁移"></a>Kingbase 数据迁移</h1><h2 id="第一步：基础数据结构及数据迁移"><a href="#第一步：基础数据结构及数据迁移" class="headerlink" title="第一步：基础数据结构及数据迁移"></a>第一步：基础数据结构及数据迁移</h2><ul><li>准备工作<ul><li>根据需要创建用户、表空间、模式等对象</li></ul></li><li>使用【数据库迁移工具】完成基础数据迁移工作</li></ul><br/><h2 id="第二步：应用接口及框架迁移"><a href="#第二步：应用接口及框架迁移" class="headerlink" title="第二步：应用接口及框架迁移"></a>第二步：应用接口及框架迁移</h2><h3 id="springboot-数据源配置"><a href="#springboot-数据源配置" class="headerlink" title="springboot 数据源配置"></a>springboot 数据源配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#环境业务自身配置开始</span></span><br><span class="line"><span class="comment">#默认数据源default，不能修改</span></span><br><span class="line"><span class="string">spring.datasource.dynamic.primary</span> <span class="string">=</span> <span class="string">default</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认数据源，名称 default</span></span><br><span class="line"><span class="comment">#spring.datasource.dynamic.datasource.default.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment">#spring.datasource.dynamic.datasource.default.url=jdbc:mysql://localhost:3306/xjnxdb?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="comment">#spring.datasource.dynamic.datasource.default.username=root</span></span><br><span class="line"><span class="comment">#spring.datasource.dynamic.datasource.default.password=root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#kingbase 数据源配置</span></span><br><span class="line"><span class="string">spring.datasource.dynamic.datasource.default.driver-class-name=com.kingbase8.Driver</span></span><br><span class="line"><span class="string">spring.datasource.dynamic.datasource.default.url=jdbc:kingbase8://10.114.12.66:54321/xjnxdb</span></span><br><span class="line"><span class="string">spring.datasource.dynamic.datasource.default.username=xjnxdb</span></span><br><span class="line"><span class="string">spring.datasource.dynamic.datasource.default.password=xjnxdb</span></span><br></pre></td></tr></table></figure><br/><h3 id="maven-配置Kingbase-驱动"><a href="#maven-配置Kingbase-驱动" class="headerlink" title="maven 配置Kingbase 驱动"></a>maven 配置Kingbase 驱动</h3><p>在maven repository中查找kingbase的驱动依赖配置，加入到我们的pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/kingbase/kingbase8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>kingbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kingbase8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><font color="red"><strong>注意：</strong></font>我们会发现Kingbase8驱动依赖根本下载不下来。此时：<strong>我们可以把驱动下载到本地，再使用maven命令install到maven本地仓库即可</strong></li></ul><p><a class="link"   href="https://maven.jeecg.org/nexus/content/repositories/jeecg/kingbase/kingbase8/8/kingbase8-8.jar" >kingbase8-8.jar<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=kingbase -DartifactId=kingbase8 -Dversion=8 -Dfile=D:\bak\kingbase8-8.jar -Dpackaging=jar -DgeneratePom=true</span><br></pre></td></tr></table></figure><blockquote><p>该语句中参数：</p><p>DgroupId ：组id 【对应pom中的groupId】<br>DartifactId：项目id 【对应pom中的artifactId】<br>Dversion：版本号 【对应pom中的version】<br>Dfile：jar包的绝对路径<br>Dpackaging：是什么包<br>DgeneratePom：是否生成pom</p></blockquote><ul><li>最后在pom中直接写入 dependency 就可以了，刷新即可使用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/kingbase/kingbase8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>kingbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kingbase8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br/><h2 id="第三步：应用功能测试（SQL兼容情况）"><a href="#第三步：应用功能测试（SQL兼容情况）" class="headerlink" title="第三步：应用功能测试（SQL兼容情况）"></a>第三步：应用功能测试（SQL兼容情况）</h2><h3 id="date-format-函数支持"><a href="#date-format-函数支持" class="headerlink" title="date_format 函数支持"></a>date_format 函数支持</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@TableInfo(name = &quot;wf_sequence&quot;, primaryKeys = &#123;&quot;seqNo&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WfSequenceMapper</span> &#123;</span><br><span class="line"><span class="meta">@Update(&quot;update wf_sequence set seqval = seqval+1 where seqno=#&#123;seqNo&#125;&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">incBySeqNo</span><span class="params">(<span class="meta">@Param(&quot;seqNo&quot;)</span> String seqNo)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from wf_sequence where seqno=#&#123;seqNo&#125;&quot;)</span></span><br><span class="line">WfSequenceDO <span class="title function_">getBySeqNo</span><span class="params">(<span class="meta">@Param(&quot;seqNo&quot;)</span> String seqNo)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Insert(&quot;insert into wf_sequence (seqno,seqval,seqdesc)values(#&#123;seqNo&#125;,#&#123;seqVal&#125;,#&#123;seqDesc&#125;)&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(WfSequenceDO seq)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;SELECT concat(DATE_FORMAT(sysdate(),&#x27;%Y%m%d&#x27;),right(lpad(seqval,15,0),8)) as seqDesc FROM wf_sequence where seqno=#&#123;seqNo&#125;&quot;)</span></span><br><span class="line">WfSequenceDO <span class="title function_">getTxnBySeqNo</span><span class="params">(<span class="meta">@Param(&quot;seqNo&quot;)</span> String seqNo)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>:<span class="number">28</span>:<span class="number">12</span> (<span class="keyword">system</span>@[<span class="keyword">local</span>]:<span class="number">54321</span>)TEST<span class="operator">=</span># <span class="keyword">select</span> date_format(<span class="string">&#x27;2022-05-15&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class="line">错误:  函数 date_format(<span class="literal">unknown</span>, <span class="literal">unknown</span>) 不存在</span><br><span class="line">第<span class="number">1</span>行<span class="keyword">select</span> date_format(<span class="string">&#x27;2022-05-15&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class="line">            <span class="operator">^</span></span><br><span class="line">提示:  没有匹配指定名称和参数类型的函数. 您也许需要增加明确的类型转换.</span><br><span class="line"><span class="number">00</span>:<span class="number">28</span>:<span class="number">15</span> (<span class="keyword">system</span>@[<span class="keyword">local</span>]:<span class="number">54321</span>)TEST<span class="operator">=</span>#</span><br></pre></td></tr></table></figure><ul><li>参考 《[应用开发及迁移][参考手册]KingbaseES扩展插件参考手册.pdf》</li></ul><blockquote><ul><li>kdb_date_function</li></ul><p>kdb_date_function 是一个兼容 mysql 数据库 date 相关函数的扩展。使用时需要 <code>create extension kdb_date_function</code>，不需要时 <code>drop extension kdb_date_function</code> 即可。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>:<span class="number">41</span>:<span class="number">28</span> (<span class="keyword">system</span>@[<span class="keyword">local</span>]:<span class="number">54321</span>)TEST<span class="operator">=</span># <span class="keyword">select</span> date_format(<span class="string">&#x27;2022-05-15&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class="line">错误:  函数 date_format(<span class="literal">unknown</span>, <span class="literal">unknown</span>) 不存在</span><br><span class="line">第<span class="number">1</span>行<span class="keyword">select</span> date_format(<span class="string">&#x27;2022-05-15&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class="line">            <span class="operator">^</span></span><br><span class="line">提示:  没有匹配指定名称和参数类型的函数. 您也许需要增加明确的类型转换.</span><br><span class="line"><span class="number">00</span>:<span class="number">41</span>:<span class="number">29</span> (<span class="keyword">system</span>@[<span class="keyword">local</span>]:<span class="number">54321</span>)TEST<span class="operator">=</span>#</span><br><span class="line"><span class="number">00</span>:<span class="number">41</span>:<span class="number">30</span> (<span class="keyword">system</span>@[<span class="keyword">local</span>]:<span class="number">54321</span>)TEST<span class="operator">=</span>#</span><br><span class="line"><span class="number">00</span>:<span class="number">41</span>:<span class="number">30</span> (<span class="keyword">system</span>@[<span class="keyword">local</span>]:<span class="number">54321</span>)TEST<span class="operator">=</span>#</span><br><span class="line"><span class="number">00</span>:<span class="number">41</span>:<span class="number">30</span> (<span class="keyword">system</span>@[<span class="keyword">local</span>]:<span class="number">54321</span>)TEST<span class="operator">=</span># <span class="keyword">create</span> extension kdb_date_function;</span><br><span class="line"><span class="keyword">CREATE</span> EXTENSION</span><br><span class="line"><span class="number">00</span>:<span class="number">44</span>:<span class="number">42</span> (<span class="keyword">system</span>@[<span class="keyword">local</span>]:<span class="number">54321</span>)TEST<span class="operator">=</span># <span class="keyword">select</span> date_format(<span class="string">&#x27;2022-05-15&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class="line"> date_format</span><br><span class="line"><span class="comment">-------------</span></span><br><span class="line"> <span class="number">2022</span><span class="number">-05</span><span class="number">-15</span></span><br><span class="line">(<span class="number">1</span> 行记录)</span><br><span class="line"></span><br><span class="line"><span class="number">00</span>:<span class="number">44</span>:<span class="number">46</span> (<span class="keyword">system</span>@[<span class="keyword">local</span>]:<span class="number">54321</span>)TEST<span class="operator">=</span>#</span><br></pre></td></tr></table></figure><br/><h1 id="数据库迁移评估系统"><a href="#数据库迁移评估系统" class="headerlink" title="数据库迁移评估系统"></a>数据库迁移评估系统</h1><ul><li>具体详情参考官方文档</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kingbase-安装与启停&quot;&gt;&lt;a href=&quot;#Kingbase-安装与启停&quot; class=&quot;headerlink&quot; title=&quot;Kingbase 安装与启停&quot;&gt;&lt;/a&gt;Kingbase 安装与启停&lt;/h1&gt;&lt;h2 id=&quot;安装前准备工作&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="database" scheme="https://sonzonzy.github.io/categories/database/"/>
    
    <category term="kingbase" scheme="https://sonzonzy.github.io/categories/database/kingbase/"/>
    
    
    <category term="database" scheme="https://sonzonzy.github.io/tags/database/"/>
    
    <category term="kingbase" scheme="https://sonzonzy.github.io/tags/kingbase/"/>
    
  </entry>
  
</feed>
